from __future__ import print_function
#!@PYTHON@
 
import sys
import unittest
import psana
import Detector
import numpy as np

 
class TestPyDetector(unittest.TestCase) :
 
    def setUp(self):

        psana.setOption('psana.calib-dir', '/reg/g/psdm/data_test/calib')
        self.ds = psana.DataSource("/reg/g/psdm/data_test/Translator/test_081_xpp_xppi0214_e439-r0054-s00-c00.xtc")
        self.detectors = [t[0] for t in psana.DetNames()]
        self.detectors += [t[1] for t in psana.DetNames() if t[1] != '']
        self.detectors += [t[0] for t in psana.DetNames('epics')]
        self.detectors += [t[1] for t in psana.DetNames('epics') if t[1] != '']

        return
 

    def test_lookup(self):

        evt = next(self.ds.events())

        print("testing %d detector names" % len(self.detectors))
        for name in self.detectors:

            det = psana.Detector(name)
            if isinstance(det, Detector.AreaDetector.AreaDetector):
                assert type(det.raw(evt)) == np.ndarray, name
            elif isinstance(det, Detector.EvrDetector.EvrDetector):
                assert type(det(evt)) in [list, type(None)], name
            elif isinstance(det, Detector.EpicsDetector.EpicsDetector):
                assert type(det(evt)) in [int, float, np.array, str], name
            elif isinstance(det, Detector.WFDetector.WFDetector):
                assert type(det.sum(evt)) == float, name
            elif isinstance(det, Detector.IpimbDetector.IpimbDetector):
                assert type(det.sum(evt)) == float, name
            elif isinstance(det, Detector.UsdUsbDetector.UsdUsbDetector):
                assert type(det.values(evt)) == np.ndarray, name
            elif isinstance(det, Detector.ControlDataDetector.ControlDataDetector):
                assert det().pvControls() is not None, name
            elif isinstance(det, Detector.Generic1DDetector.Generic1DDetector):
                assert type(det(evt)) == list, name

            # this must be last, because all detectors are DdlDetectors
            elif isinstance(det, Detector.DdlDetector.DdlDetector):
                assert det.get(evt) is not None

            else:
                raise Exception('new detector? write a test for it!')

        return


    def test_cspad(self):
        cspad = psana.Detector('cspad')
        evt = next(self.ds.events())
        assert cspad.raw(evt).shape == (32, 185, 388)
        assert cspad.calib(evt).shape == (32, 185, 388)

        assert np.abs(cspad.image(evt).sum() - 8.52574e+08) < 1e5
        assert np.abs(cspad.calib(evt).sum() - cspad.image(evt).sum()) < 1e5

        return


    def test_cspad_cm1(self):
    	cspad = psana.Detector('cspad')
	evt = next(self.ds.events())
	mask = cspad.mask(evt, unbond=True)
	nda0, nda1, rms = 30, 20, 3

	nda = np.ones((32, 185, 388))
	## mean > 25, will call alg #5 since every pixel is "hit"
	nda[0] *= nda0
	## mean < 25, will continue with alg #1
	nda[1] *= nda1
       	nda[np.where(mask == 0)] = rms
	nda_before = np.copy(nda)

	# set parameters to nominal default, because test data has cmpars
	# set in the calib-dir
	cspad.common_mode_apply(evt, nda, cmpars=[1,25,25,100,1])

	## Test call to unbonded cm (alg #5) if alg #1 fails
	assert (nda[0] == nda_before[0] - rms).all()
	## Test if alg #1 succeeds
	assert (nda[1] == nda_before[1] - nda1).all()

	# now try with par[4]=0 (disabling alg #5)
	nda = np.copy(nda_before)
	cspad.common_mode_apply(evt, nda, cmpars=[1,25,25,100,0])
	# should do nothing, since every pixel is "hit" (>25) and we have
	# disabled algorithm 5
	assert (nda[0] == nda_before[0]).all()


    def test_string_pv(self):
        pv = psana.Detector('grid_var01_name')
        evt = next(self.ds.events())
        assert type(pv(evt)) is str


    def test_detector_name(self):

        cspad = psana.Detector('cspad')
        assert cspad.name.dev == 'Cspad'

        cspad2 = psana.Detector('XppGon.0:Cspad.0')
        assert cspad.name.dev == 'Cspad'


    def test_dettype(self):

        source_string = 'cspad'
        source_string = Detector.PyDetector.map_alias_to_source(source_string, self.ds.env())
        assert source_string == 'DetInfo(XppGon.0:Cspad.0)'

        dt = Detector.PyDetector.dettype(source_string, self.ds.env())
        assert dt == Detector.AreaDetector.AreaDetector

    def test_missing(self):
        name = 'incorrectName'
        missing = psana.Detector(name,accept_missing=True)
        assert missing.sdfg(123,'hello') is None
        missing = psana.Detector(name,self.ds.env(),accept_missing=True)
        assert missing.sdfg(123,'hello') is None
        missing = psana.Detector(name,self.ds.env(),True)
        assert missing.sdfg(123,'hello') is None
        missing = psana.Detector(name,local_env=self.ds.env(),
                                 accept_missing=True)
        assert missing.sdfg(123,'hello') is None
        try:
            # expect an exception in this case, raise if we don't see it
            missing = psana.Detector(name)
            raise NameError('Detector name %s should raise exception' % name)
        except KeyError:
            pass

 
if __name__ == '__main__':
     unittest.main(argv=[sys.argv[0], '-v'])
