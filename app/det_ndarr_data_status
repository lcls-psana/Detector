#!/usr/bin/env python
#------------------------------

from __future__ import print_function
import os
import sys
import psana
import numpy as np
from time import time, localtime, strftime
from pyimgalgos.GlobalUtils import print_ndarr, divide_protected, print_command_line_parameters, reshape_to_2d
from Detector.PyDataAccess import time_pars_evt #get_jungfrau_data_object, get_jungfrau_config_object, get_jungfrau_gain_mode_object
from Detector.EventCodeManager import EventCodeManager
import PSCalib.GlobalUtils as gu

from expmon.PSUtils import list_of_sources_for_dataset
#from Detector.GlobalUtils import print_ndarr, divide_protected

LOG_FILE = '/reg/g/psdm/logs/calibman/#YYYY-MM/det_ndarr_data_status.txt'

#------------------------------

def plot_det_image(det, evt, nda, tit='') :
    """Plots averaged image
    """
    import pyimgalgos.GlobalGraphics as gg

    #img = det.image(evt, nda)
    img = reshape_to_2d(nda)
    if img is None : 
        print('plot_det_image - Image "%s" is not available.'%tit)
        #sys.exit('Image is not available. FURTHER TEST IS TERMINATED')
        return
    
    ave, rms = nda.mean(), nda.std()

    gg.plotImageLarge(img, amp_range=(ave-1*rms, ave+3*rms), title=tit)
    gg.show()

#------------------------------

class DetNDArrDataProc(object) :

    def __init__(self, parser, source):
        self.src = source
        self.init_parameters(parser)
        if self.verbos & 1 : self.print_attrs()


    def init_parameters(self, parser=None) :
        """Command line parameters parsing"""
        self.parser = option_parser() if parser is None else parser

        (popts, pargs) = self.parser.parse_args()

        if popts.dsname is None : raise IOError('WARNING: option "-d <dataset>" MUST be specified.') # sys.exit()
        if popts.source is None : raise IOError('WARNING: option "-s <source>" MUST be specified.')

        self.dsname = popts.dsname
        self.ofname = popts.ofname
        self.events = popts.events
        self.evskip = popts.evskip
        self.clbdir = popts.clbdir

        self.intlow = popts.intlow
        self.inthig = popts.inthig
        self.rmslow = popts.rmslow
        self.rmshig = popts.rmshig
        self.fraclm = popts.fraclm

        self.intnlo = popts.intnlo
        self.intnhi = popts.intnhi
        self.rmsnlo = popts.rmsnlo
        self.rmsnhi = popts.rmsnhi
        
        self.plotim = popts.plotim
        self.verbos = popts.verbos
        self.savebw = popts.savebw
        self.uplobw = popts.uplobw
        self.evcode = popts.evcode

        self.det      = None
        self.shape    = None
        self.counter  = 0
        self.stage    = 0
        self.gmname   = None


    def print_attrs(self) :
        print('%s\nAttributes of the %s object' % (50*'_', self.__class__.__name__))
        print('dataset name                    : %s'   % self.dsname)
        print('source name                     : %s'   % self.src)   
        print('output file name template       : %s'   % self.ofname)
        print('calib directory                 : %s'   % self.clbdir)   
        print('number of events to collect     : %d'   % self.events)
        print('number of events to skip        : %d'   % self.evskip)
        print('event codes to select events    : %s'   % self.evcode)

        print('control bit-word to plot images : %d'   % self.plotim)
        print('control bit-word for verbosity  : %d'   % self.verbos)
        print('control bit-word to save arrays : %d'   % self.savebw)
        print('control bit-word to upload files: %d'   % self.uplobw)

        print('INTENSITY low limit (ADU)       : ',      self.intlow)
        print('INTENSITY high limit (ADU)      : ',      self.inthig)
        print('RMS low limit (ADU)             : ',      self.rmslow)
        print('RMS high limit (ADU)            : ',      self.rmshig)
        print('allowed low/high fraction limit : %.3f' % self.fraclm)
        print('\nParameters for auto-evaluation of limits (ON/OFF if non-0/0):')
        print('number of sigma from mean for INTENSITY low limit  : ',  self.intnlo)
        print('number of sigma from mean for INTENSITY high limit : ',  self.intnhi)
        print('number of sigma from mean for RMS low limit        : ',  self.rmsnlo)
        print('number of sigma from mean for RMS high limit       : ',  self.rmsnhi)
        print(50*'_', '\n')


    def _common_mode_pars(self, arr_ave, arr_rms, arr_msk) :
        """Returns detector-dependent common mode parameters as np.array for a few detectors and None for others.
        """
        import PSCalib.GlobalUtils as gu 
        import math

        dettype = gu.det_type_from_source(self.src)

        ave = arr_ave[arr_msk>0].mean()
        #rms = arr_ave[arr_msk>0].std()
        rms = arr_rms[arr_msk>0].mean()

        if self.verbos & 1 :
            print('Evaluate common mode for source: %s det: %s, estimated intensity ave: %.3f  rms: %.3f' %\
                  (self.src, gu.dic_det_type_to_name[dettype], ave, rms))

        if dettype == gu.PNCCD :
            return np.array((3, math.ceil(4*rms), math.ceil(4*rms), 128))

        #elif dettype == gu.EPIX100A :
        #    return np.array((4, 6, math.ceil(2*rms), math.ceil(2*rms)))

        #elif dettype == gu.CSPAD :
        #    return np.array((1, math.ceil(3*rms), math.ceil(2*rms), 100))

        #elif dettype == gu.CSPAD2X2 :
        #    return np.array((1, math.ceil(3*rms), math.ceil(2*rms), 100))

        else :
            return None


    def _init_stage(self, evt, env) :

        if self.det is None : self.det = psana.Detector(self.src, env)
        if self.det is None :
            raise ValueError('Can not create the Detector object for source %s' % self.src)

        ndaraw = self.det.raw(evt)

        if ndaraw is None : return False
        if ndaraw.size == 0 : return False
        if ndaraw.shape[0] == 0 : return False

        print_ndarr(ndaraw, '_init_stage: ndaraw', first=1000, last=1005)

        t0_sec = time()

        self.shape = ndaraw.shape
        self.dtype_raw = ndaraw.dtype

        if self.verbos & 1 : print('Begin processing for %s, raw.dtype = %s, raw.shape = %s, intensity limits low: %.1f  high: %.1f'%\
                                   (self.src, str(self.dtype_raw), str(self.shape), self.intlow, self.inthig))

        self.arr0       = np.zeros(self.shape, dtype=self.dtype_raw)
        self.arr1       = np.ones (self.shape, dtype=self.dtype_raw)

        self.sta_int_lo = np.zeros(self.shape, dtype=np.int64)
        self.sta_int_hi = np.zeros(self.shape, dtype=np.int64)

        self.arr_sum0   = np.zeros(self.shape, dtype=np.int64)
        self.arr_sum1   = np.zeros(self.shape, dtype=np.double)
        self.arr_sum2   = np.zeros(self.shape, dtype=np.double)

        self.gate_lo    = self.arr1 * self.intlow
        self.gate_hi    = self.arr1 * self.inthig

        self.arr_max    = np.zeros(self.shape, dtype=self.dtype_raw)
        self.arr_min    = np.ones (self.shape, dtype=self.dtype_raw) * 0xffff

        self.exp = env.experiment()
        self.runnum = evt.run()
        self.tsec, self.tnsec, self.fid, self.tsdate, self.tstime = time_pars_evt(evt)

        if self.verbos & 1 : print('Initialization for %s consumes dt=%7.3f sec' % (self.src, time()-t0_sec))

        return True


    def event(self, evt, env) :
        if self.shape is None : # to omit function call
           if not self._init_stage(evt, env) : return
        self._proc_event(evt, env)


    def _proc_event(self, evt, env) :

        ndaraw = self.det.raw(evt)
        if ndaraw is None : return

        #ndaraw = (ndaraw & self.MSK).astype(self.dtype_raw)
        ndadbl = np.array(ndaraw, dtype=np.double)

        #print_ndarr(ndadbl, 'XXX:ndadbl')

        self.counter += 1

        cond_lo = ndaraw<self.gate_lo
        cond_hi = ndaraw>self.gate_hi
        condlist = (np.logical_not(np.logical_or(cond_lo, cond_hi)),)

        #print 'XXX:' # shape:(1, 512, 1024)
        #print_ndarr(self.arr1, 'arr1')
        #print_ndarr(self.arr_sum0, 'arr_sum0')
        #print_ndarr(self.arr_sum1, 'arr_sum1')
        #print_ndarr(self.arr_sum2, 'arr_sum2')

        self.arr_sum0   += np.select(condlist, (self.arr1,), 0)
        self.arr_sum1   += np.select(condlist, (ndadbl,), 0)
        self.arr_sum2   += np.select(condlist, (np.square(ndadbl),), 0)

        self.sta_int_lo += np.select((cond_lo,), (self.arr1,), 0)
        self.sta_int_hi += np.select((cond_hi,), (self.arr1,), 0)

        self.arr_max = np.maximum(self.arr_max, ndaraw)
        self.arr_min = np.minimum(self.arr_min, ndaraw)


    def summary(self, evt, env) :

        #if self.verbos & 1 :
        print('%s\nSummary for dataset: %s source: %s' % (80*'_', self.dsname, self.src))

        if self.counter :
            print('  %d events found/processed' % (self.counter), end=' ')
        else :
            print('  counter=%d there is no statistics to process/save...' % self.counter)
            return 
 
        t0_sec = time()

        # make short references
        det     = self.det
        ofname  = self.ofname
        plotim  = self.plotim
        savebw  = self.savebw
        verbos  = self.verbos
        inthig  = self.inthig
        intlow  = self.intlow
        fraclm  = self.fraclm
        counter = self.counter

        arr_av1 = divide_protected(self.arr_sum1, self.arr_sum0)
        arr_av2 = divide_protected(self.arr_sum2, self.arr_sum0)
        arr_rms = np.sqrt(arr_av2 - np.square(arr_av1))

        frac_int_lo = np.array(self.sta_int_lo/float(counter), dtype=np.float32)
        frac_int_hi = np.array(self.sta_int_hi/float(counter), dtype=np.float32)
        
        rms_min, rms_max = gu.evaluate_limits(arr_rms, self.rmsnlo, self.rmsnhi, self.rmslow, self.rmshig, self.verbos, cmt='RMS')
        ave_min, ave_max = gu.evaluate_limits(arr_av1, self.intnlo, self.intnhi, self.intlow, self.inthig, self.verbos, cmt='AVE')

        arr_sta_rms_hi = np.select((arr_rms>rms_max,),      (self.arr1,), 0)
        arr_sta_rms_lo = np.select((arr_rms<rms_min,),      (self.arr1,), 0)
        arr_sta_int_hi = np.select((frac_int_hi>fraclm,),   (self.arr1,), 0)
        arr_sta_int_lo = np.select((frac_int_lo>fraclm,),   (self.arr1,), 0)
        arr_sta_ave_hi = np.select((arr_av1>ave_max,),      (self.arr1,), 0)
        arr_sta_ave_lo = np.select((arr_av1<ave_min,),      (self.arr1,), 0)
        arr_sta_max_hi = np.select((self.arr_max>ave_max,), (self.arr1,), 0)
        arr_sta_min_lo = np.select((self.arr_min<ave_min,), (self.arr1,), 0)

        #0/1/2/4/8/16/32/64/128 for good/hot-rms/saturated/cold/cold-rms/average above limit/average below limit/max above limit/min below limit/, 
        arr_sta = np.zeros(self.shape, dtype=np.int64)
        arr_sta += arr_sta_rms_hi     # hot rms
        arr_sta += arr_sta_rms_lo*8   # cold rms
        arr_sta += arr_sta_int_hi*2   # satturated
        arr_sta += arr_sta_int_lo*4   # cold
        arr_sta += arr_sta_ave_hi*16  # too large average
        arr_sta += arr_sta_ave_lo*32  # too small average
        arr_sta += arr_sta_max_hi*64  # max > limit (at least in one event)
        arr_sta += arr_sta_min_lo*128 # min < limit (at least in one event)
        
        arr_msk = np.select((arr_sta>0,), (self.arr0,), 1)

        print('  Bad pixel status bits:')  
        print('  bit   1: %8d pixel rms       > %.3f' % (arr_sta_rms_hi.sum(), rms_max)) 
        print('  bit   8: %8d pixel rms       < %.3f' % (arr_sta_rms_lo.sum(), rms_min)) 
        print('  bit   2: %8d pixel intensity > %g in more than %g fraction of events' % (arr_sta_int_hi.sum(), inthig, fraclm)) 
        print('  bit   4: %8d pixel intensity < %g in more than %g fraction of events' % (arr_sta_int_lo.sum(), intlow, fraclm))
        print('  bit  16: %8d pixel average   > %g'   % (arr_sta_ave_hi.sum(), ave_max)) 
        print('  bit  32: %8d pixel average   < %g'   % (arr_sta_ave_lo.sum(), ave_min))
        print('  bit  64: %8d pixel max       > %g'   % (arr_sta_max_hi.sum(), ave_max)) 
        print('  bit 128: %8d pixel min       < %g'   % (arr_sta_min_lo.sum(), ave_min))
        print('  total  : %8d pixel marked by any bit'% (arr_msk.size - arr_msk.sum()))

        if plotim &  1 : plot_det_image(det, evt, arr_av1,         tit='average')
        if plotim &  2 : plot_det_image(det, evt, arr_rms,         tit='RMS')
        if plotim &  4 : plot_det_image(det, evt, arr_sta,         tit='status')
        if plotim &  8 : plot_det_image(det, evt, arr_msk,         tit='mask')
        if plotim & 16 : plot_det_image(det, evt, self.arr_max,    tit='maximum')
        if plotim & 32 : plot_det_image(det, evt, self.arr_min,    tit='minimum')
        if plotim & 64 : plot_det_image(det, evt, self.sta_int_lo, tit='statistics below threshold')
        if plotim &128 : plot_det_image(det, evt, self.sta_int_hi, tit='statistics above threshold')

        self.arr_av1 = arr_av1        
        self.arr_rms = arr_rms
        self.arr_sta = arr_sta
        self.arr_msk = arr_msk

#------------------------------

    def get_ndarrays(self) :
        """Returns n-d arrays after summary"""
        return self.arr_av1, self.arr_rms, self.arr_sta, self.arr_msk, self.arr_max, self.arr_min

#------------------------------

    def print_ndarrays(self) :
        print('%s\nCollected np.arrays for %s:' % (80*'_', self.src))
        print_ndarr(self.arr_av1, 'arr_av1')
        print_ndarr(self.arr_rms, 'arr_rms')
        print_ndarr(self.arr_sta, 'arr_sta')
        print_ndarr(self.arr_max, 'arr_max')
        print_ndarr(self.arr_min, 'arr_min')
        print_ndarr(self.arr_msk, 'arr_msk')

#------------------------------

    def fname_template(self) :
        return gu.calib_fname_template(self.exp, self.runnum, self.tsec, self.tnsec, self.fid,\
                                       self.tsdate, self.tstime, self.src, self.counter, self.ofname)
#------------------------------

    def save_ndarrays(self, addmetad=True) :
        print('%s\nSave arrays:' % (80*'_'))

        det      = self.det
        verbos   = self.verbos
        savebw   = self.savebw
        cmts = ['DATASET  %s' % self.dsname, 'STATISTICS  %d' % self.counter]        
        template = self.fname_template()

        gu.create_path(template, depth=0, mode=0o770, verb=(verbos>0))

        if savebw &  1 : det.save_asdaq(template % 'ave', self.arr_av1, cmts + ['ARR_TYPE  average'], '%8.2f', verbos, addmetad)
        if savebw &  2 : det.save_asdaq(template % 'rms', self.arr_rms, cmts + ['ARR_TYPE  RMS'],     '%8.2f', verbos, addmetad)
        if savebw &  4 : det.save_asdaq(template % 'sta', self.arr_sta, cmts + ['ARR_TYPE  status'],  '%d',    verbos, addmetad)
        if savebw &  8 : det.save_asdaq(template % 'msk', self.arr_msk, cmts + ['ARR_TYPE  mask'],    '%1d',   verbos, addmetad)
        if savebw & 16 : det.save_asdaq(template % 'max', self.arr_max, cmts + ['ARR_TYPE  max'],     '%d',    verbos, addmetad)
        if savebw & 32 : det.save_asdaq(template % 'min', self.arr_min, cmts + ['ARR_TYPE  min'],     '%d',    verbos, addmetad)

        if verbos : print('All files saved')

#------------------------------

    def upload_files_to_calibdir(self) :

        template = self.fname_template()
        dettype = gu.det_type_from_source(self.src)
        calibgrp = gu.dic_det_type_to_calib_group[dettype] # 'Camera::CalibV1'
        clbdir = self.clbdir if self.clbdir is not None else '/reg/d/psdm/%s/%s/calib' % (self.exp[:3], self.exp)
        ctypedir = '%s/%s/%s' % (clbdir, calibgrp, self.src) # self.src)
        fname = '%d-end.data' % self.runnum

        print('Deploy files in %s' % ctypedir)

        verbos = self.verbos
        uplobw = self.uplobw

        if uplobw &  1 : gu.deploy_file(template % 'ave', ctypedir, 'pixel_dataave',  fname, LOG_FILE, verbos)
        if uplobw &  2 : gu.deploy_file(template % 'rms', ctypedir, 'pixel_datarms',  fname, LOG_FILE, verbos) 
        if uplobw &  4 : gu.deploy_file(template % 'sta', ctypedir, 'pixel_datast',   fname, LOG_FILE, verbos) 
        if uplobw &  8 : gu.deploy_file(template % 'msk', ctypedir, 'pixel_datamask', fname, LOG_FILE, verbos)  
        if uplobw & 16 : gu.deploy_file(template % 'max', ctypedir, 'pixel_datamax',  fname, LOG_FILE, verbos)   
        if uplobw & 32 : gu.deploy_file(template % 'min', ctypedir, 'pixel_datamin',  fname, LOG_FILE, verbos)   
 
        if verbos : print('All files deploed')

#------------------------------

    def end_of_proc(self, evt, env) :
        self.summary(evt, env)
        self.print_ndarrays()
        if self.savebw : self.save_ndarrays()
        if self.uplobw : self.upload_files_to_calibdir()

#------------------------------
#------------------------------
#------------------------------
#------------------------------

def detector_ndarr_data_proc():

    PROC_DATA = True

    t0_sec = time()
    tdt = t0_sec

    parser = option_parser()
    (popts, pargs) = parser.parse_args()
    SKIP   = popts.evskip
    EVENTS = popts.events + SKIP
    verbos = popts.verbos
    source = popts.source
    dsname = popts.dsname
    evcode = popts.evcode

    print('%s\nIn detector_ndarr_data_proc' % (50*'_'))
    print_command_line_parameters(parser)

    # Non-standard calib directory
    #psana.setOption('psana.calib-dir', './calib')

    if verbos & 1 : print('Raw data processing of dataset: %s' % dsname)

    ecm = EventCodeManager(evcode, verbos) # see: det_ndarr_raw_proc

    sources_all = list_of_sources_for_dataset(dsname)

    print('%s\nSources in %s:' % (50*'_', dsname))
    for i,s in enumerate(sources_all) : print('%4d %s' % (i,s))

    det_types = [s.lower() for s in source.split(',')]
    print('%s\nData processing is requested for detector types:' % (50*'_'))
    for t in det_types : print('    %s' % t)

    sources_sel = [s for s in sources_all if any([t in s.lower() for t in det_types])]

    print('%s\nSources selected for processing:' % (50*'_'))
    for i,s in enumerate(sources_sel) : print('%4d %s' % (i,s))
    print(50*'_')

    #lst_dpo = [DetectorDataProc(parser, src) for src in sources_sel]
    lst_dpo = [DetNDArrDataProc(parser, src) for src in sources_sel]

    if not len(lst_dpo) : 
        raise IOError('WARNING: list of sources "%s" does not have Detector' % sources_sel)

    rec = gu.log_rec_on_start()
    gu.add_rec_to_log(LOG_FILE, rec, verbos)

    #====================
    #sys.exit('TEST EXIT')
    #====================

    ds  = psana.DataSource(dsname)
    env = ds.env()
    nevtot = 0

    # Loop over runs
    #for irun, run in enumerate(ds.runs()):
    #    print '%s\nRun %d' % (50*'=', run.run())
        
    #    # Loop over calibcycles
    #    nevclc = 0
    #    for istep, step in enumerate(run.steps()):
    #        env = step.env()

    #        # Loop over events
    #        for i, evt in enumerate(step.events()):
            
    for i, evt in enumerate(ds.events()):
                if i<SKIP : continue
                if not i<EVENTS : break
                #if not ecm.select(evt) : continue 

                nevtot += 1
                #nevclc += 1

                if PROC_DATA :
                    for dpo in lst_dpo : dpo.event(evt,env)
                if verbos & 2 :
                    if (i < 6) \
                    or (i < 51 and not i%10) \
                    or (i < 501 and not i%100) \
                    or (not i%1000) :
                    #or (not i%1000) :
                      tsec = time()
                      dt   = tsec - tdt
                      tdt  = tsec
                      print('  Event %4d,  time=%7.3f sec,  dt=%5.3f sec' % (i, time()-t0_sec, dt))

#            print '  Run %d, calibcycle %d, number of events processed %d, total %d, gain mode %s'%\
#                  (run.run(), istep, nevclc, nevtot, gm.name)
#        print '  Run %d, number of calibcycles processed %d' % (run.run(), istep+1)
#    print 'Number of runs processed %d' % (irun+1)

    if PROC_DATA : 
        for dpo in lst_dpo : dpo.end_of_proc(evt,env)
    if verbos & 1 : print('%s\nTotal consumed time = %f sec.' % (80*'_', time()-t0_sec))

#------------------------------

def usage(mode=0) :
    proc_name = os.path.basename(sys.argv[0])
    if   mode == 1 : return 'Proceses detector data and evaluate pixel status.'
    elif mode == 2 : return 'Try: %s -h' % proc_name
    else : return\
           '\n%prog -d <dataset> [-s <source>] [-f <file-name-template>]'\
           '\n       [-n <events-collect>] [-m <events-skip>] [-v <verbosity-bitword>] [-p <plot-bitword>] ...'\
           '\n       where -v, -S control bit-words stand for 1/2/4/8/16/32/64/128 - ave/rms/status/mask/max/min/sta_int_lo/sta_int_hi'\
           '\nEx.1:  %prog -d exp=xpptut15:run=260 -s epix100,cspad2x2 -f nda-#exp-#run-#src-#evts-#type-#date-#time-#fid-#sec-#nsec.txt -n 100'\
           '\nEx.2:  %prog -d exp=xpptut15:run=260 -u 4 -n 500'\
           '\nEx.3:  %prog -d exp=amo86615:run=197 -n 500'\
           +'\nEx.4:  bsub -q psnehq -o log-%%J.txt %s -d exp=xpptut15:run=320 -u 4 -n 500' % sys.argv[0]
#------------------------------

def option_parser() :
    from optparse import OptionParser

    #d_dsname = 'exp=xpptut15:run=280' # Opal1000.0, Acqiris.1, Acqiris.2
    d_dsname = 'exp=xpptut15:run=260' # Epix100a, Cspad2x2
    d_source = 'cspad,opal,epix100,pnccd,princeton,andor' # Detector types to process
    #d_ofname = 'work/nda-#exp-#run-#src-#evts-#type-#date-#time-#fid-#sec-#nsec.txt'
    d_ofname = 'work/nda-#exp-#run-#src-#evts-#type.txt'
    d_events = 1000000
    d_evskip = 0
    d_intlow = 1
    d_inthig = 16000 # 14-bit ADC in uint16: 0011 1111 1111 1110 or (1<<14)-2 or 16382 or 037776
    d_rmslow = 0.1
    d_rmshig = 16000
    d_fraclm = 0.2
    d_intnlo = 0
    d_intnhi = 0
    d_rmsnlo = 0
    d_rmsnhi = 0
    d_plotim = 0      
    d_verbos = 0o377
    d_savebw = 0o377
    d_uplobw = 0
    d_clbdir = None
    d_evcode = None
 
    h_dsname='dataset name, default = %s' % d_dsname
    h_source='input ndarray source name, default = %s' % d_source
    h_ofname='output file name template, default = %s' % d_ofname
    h_events='number of events to collect, default = %s' % d_events
    h_evskip='number of events to skip, default = %s' % d_evskip
    h_intlow='intensity low limit, default = %s' % d_intlow
    h_inthig='intensity high limit, default = %s' % d_inthig
    h_rmslow='rms low limit, default = %s' % d_rmslow
    h_rmshig='rms high limit, default = %s' % d_rmshig
    h_fraclm='allowed fraction limit, default = %s' % d_fraclm
    h_intnlo='number of sigma from mean to low limit on INTENSITY, if =0 - use intlow, default = %s' % d_intnlo
    h_intnhi='number of sigma from mean to high limit on INTENSITY, if =0 - use inthig, default = %s' % d_intnhi
    h_rmsnlo='number of sigma from mean to low limit on RMS, if =0 - use rmslow, default = %s' % d_rmsnlo
    h_rmsnhi='number of sigma from mean to high limit on RMS, if =0 - use rmshig, default = %s' % d_rmsnhi
    h_plotim='control bit-word to plot images, default = %s' % d_plotim
    h_verbos='control bit-word for verbosity, default = %s' % d_verbos
    h_savebw='control bit-word to save arrays, default = %s' % d_savebw
    h_uplobw='control bit-word to upload files in calib directory, default = %s' % d_uplobw
    h_clbdir='calib directory for deployment of calibration files, default = %s' % d_clbdir
    h_evcode='comma separated event codes for selection as OR combination, any negative %s'%\
             'code inverts selection, default = %s'%str(d_evcode)

    parser = OptionParser(description=usage(1), usage = usage())
    parser.add_option('-d', '--dsname', dest='dsname', default=d_dsname, action='store', type='string', help=h_dsname)
    parser.add_option('-s', '--source', dest='source', default=d_source, action='store', type='string', help=h_source)
    parser.add_option('-f', '--ofname', dest='ofname', default=d_ofname, action='store', type='string', help=h_ofname)
    parser.add_option('-n', '--events', dest='events', default=d_events, action='store', type='int',    help=h_events)
    parser.add_option('-m', '--evskip', dest='evskip', default=d_evskip, action='store', type='int',    help=h_evskip)
    parser.add_option('-b', '--intlow', dest='intlow', default=d_intlow, action='store', type='float',  help=h_intlow)
    parser.add_option('-t', '--inthig', dest='inthig', default=d_inthig, action='store', type='float',  help=h_inthig)
    parser.add_option('-B', '--rmslow', dest='rmslow', default=d_rmslow, action='store', type='float',  help=h_rmslow)
    parser.add_option('-T', '--rmshig', dest='rmshig', default=d_rmshig, action='store', type='float',  help=h_rmshig)
    parser.add_option('-F', '--fraclm', dest='fraclm', default=d_fraclm, action='store', type='float',  help=h_fraclm)
    parser.add_option('-D', '--intnlo', dest='intnlo', default=d_intnlo, action='store', type='float',  help=h_intnlo)
    parser.add_option('-U', '--intnhi', dest='intnhi', default=d_intnhi, action='store', type='float',  help=h_intnhi)
    parser.add_option('-L', '--rmsnlo', dest='rmsnlo', default=d_rmsnlo, action='store', type='float',  help=h_rmsnlo)
    parser.add_option('-H', '--rmsnhi', dest='rmsnhi', default=d_rmsnhi, action='store', type='float',  help=h_rmsnhi)
    parser.add_option('-p', '--plotim', dest='plotim', default=d_plotim, action='store', type='int',    help=h_plotim)
    parser.add_option('-v', '--verbos', dest='verbos', default=d_verbos, action='store', type='int',    help=h_verbos)
    parser.add_option('-S', '--savebw', dest='savebw', default=d_savebw, action='store', type='int',    help=h_savebw)
    parser.add_option('-u', '--uplobw', dest='uplobw', default=d_uplobw, action='store', type='int',    help=h_uplobw)
    parser.add_option('-c', '--clbdir', dest='clbdir', default=d_clbdir, action='store', type='string', help=h_clbdir)
    parser.add_option('-C', '--evcode', dest='evcode', default=d_evcode, action='store', type='string', help=h_evcode)
    #parser.add_option('-u', '--uplobw', dest='upload', default=d_upload, action='store_true',           help=h_upload)

    return parser

#------------------------------

if __name__ == "__main__" :
    if len(sys.argv)==1 : print('\n%s' % usage(2))
    else : detector_ndarr_data_proc()
    sys.exit(0)

#------------------------------
