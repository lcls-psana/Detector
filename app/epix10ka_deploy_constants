#!/usr/bin/env python

import os
import sys
from time import time

from Detector.GlobalUtils import info_command_line_parameters
from Detector.UtilsEpix10kaCalib import deploy_constants, CALIB_REPO_EPIX10KA, DIR_LOG_AT_START, GAIN_MODES_IN
import Detector.UtilsLogging as ul
logger = ul.logging.getLogger(__name__)
SCRNAME = sys.argv[0].split('/')[-1]


def epix10ka_deploy_constants():

    t0_sec = time()

    parser = option_parser()
    (popts, pargs) = parser.parse_args()
    args = pargs
    opts = vars(popts)
    #defs = vars(parser.get_default_values())

    if popts.exp is None: raise IOError('WARNING: option "-e <experiment>" MUST be specified.') # sys.exit()
    if popts.det is None: raise IOError('WARNING: option "-d <detector-name>" MUST be specified.')
    if popts.run is None: raise IOError('WARNING: option "-r <run-number>" MUST be specified.')

    from Detector.UtilsCalib import RepoManager, cgu
    import getpass
    repoman = RepoManager(popts.dirrepo, dir_log_at_start=DIR_LOG_AT_START,\
                          dirmode=popts.dirmode, filemode=popts.filemode, group=popts.group)
    logname = repoman.logname('%s_%s' % (SCRNAME, getpass.getuser()))
    ul.init_logger(loglevel=popts.logmode, logfname=logname, group=popts.group) # fmt='[%(levelname).1s] %(filename)s L%(lineno)04d %(message)s')
    logger.info('log file: %s' % logname)
    repoman.save_record_at_start(SCRNAME, adddict={'logfile':logname})

    deploy_constants(*args, **opts)

    os.chmod(logname, popts.filemode)
    cgu.change_file_ownership(logname, user=None, group=popts.group)

    logger.info('DONE, consumed time %.3f sec' % (time() - t0_sec))


def usage(mode=0):
    proc_name = os.path.basename(sys.argv[0])
    if   mode == 1: return 'For specified run or timstamp combine gain constants from repository and deploy them in the calib directory'
    elif mode == 2: return 'Try: %s -h' % proc_name
    else: return\
           '\n%prog -e <experiment> [-d <detector>] [-r <run-number>] [-L <logging-mode>] [-D] [...]'\
           '\nTEST COMMAND:'\
           '\n  %prog -e mfxx32516 -d NoDetector.0:Epix10ka.3 -r 1021 -t 20180910111049 -x :smd:dir=/reg/d/psdm/mfx/mfxx32516/scratch/gabriel/pulser/xtc/combined -o ./myrepo -c ./calib -L info -D'\
           '\nREGULAR COMMAND:'\
           '\n  %prog -e mfxx32516 -d NoDetector.0:Epix10ka.3 -r 1021 -D -L INFO'\
           '\n  %prog -e xcsx35617 -d XcsEndstation.0:Epix10ka2M.0 -r394 -t 396 -o ./work -D -c ./calib # deploys 394-end.data for all calibrations found for runs <= 386'\
           '\n  %prog -e xcsx35617 -d XcsEndstation.0:Epix10ka2M.0 -r544 -o ./work -D -c ./calib'\
           '\n  %prog -e xcsx35617 -d XcsEndstation.0:Epix10ka2M.0 -r544 -o ./work -D -c ./calib --proc=g --low=0.25 --medium=1 --high=1'


def option_parser():
    from optparse import OptionParser

    d_exp     = None # 'mfxx32516'
    d_det     = None # 'NoDetector.0:Epix10ka.3'
    d_run     = None # 1021
    d_runend  = 'end'
    d_tstamp  = None # 20180910111049
    d_dsnamex = None # ':smd:dir=/reg/d/psdm/mfx/mfxx32516/scratch/.../xtc/combined or exp=mfxx32516:run=11:smd:dir=...'
    d_dirrepo = CALIB_REPO_EPIX10KA # './myrepo'
    d_dircalib= None # './calib
    d_deploy  = False
    d_errskip = False
    d_logmode = 'INFO' #'DEBUG'
    d_proc    = 'psrg'
    d_paninds = None
    d_high    = 16.40 # 1.
    d_medium  = 5.466 # 0.33333
    d_low     = 0.164 # 0.01
    d_dirmode  = 0o2775
    d_filemode = 0o664
    d_group    = 'ps-users'

    #Blaj, Gabriel <blaj@slac.stanford.edu> Mon 8/3/2020 6:52 PM
    #Hi, Here are some good starting values for the ADC to keV conversion:
    #High gain: 132 ADU / 8.05 keV = 16.40 ADU/keV
    #Medium gain: 132 ADU / 8.05 keV / 3 = 5.466 ADU/keV
    #Low gain: 132 ADU / 8.05 keV / 100 = 0.164 ADU/keV

    h_exp     = 'experiment name, default = %s' % d_exp
    h_det     = 'detector name, default = %s' % d_det
    h_run     = 'run number for beginning of the validity range, default = %s' % str(d_run)
    h_runend  = 'run number for ending of the validity range, default = %s' % str(d_runend)
    h_tstamp  = 'non-default time stamp (<YYYYmmddHHMMSS) or run number(<10000) for constants selection in repo. '\
                'By default run time is used, default = %s' % str(d_tstamp)
    h_dsnamex = 'dataset string or xtc file name or extension after exp=<exp>:run=<run> beginning with column ":", default = %s' % d_dsnamex
    h_dirrepo = 'non-default repository of calibration results, default = %s' % d_dirrepo
    h_dircalib= 'deployment calib directory if different from standard one, default = %s' % d_dircalib
    h_deploy  = 'deploy constants to the calib dir, default = %s' % d_deploy
    h_errskip = 'if possible, skip errors and deploy constants, default = %s' % d_errskip
    h_logmode = 'logging mode, one of %s, default = %s' % (ul.STR_LEVEL_NAMES, d_logmode)
    h_high    = 'default high   gain ADU/keV, default = %s' % str(d_high)
    h_medium  = 'default medium gain ADU/keV, default = %s' % str(d_medium)
    h_low     = 'default low    gain ADU/keV, default = %s' % str(d_low)
    h_proc    = '(str) keyword for processing of "p"-pedestals, "r"-rms, "s"-status, "g" or "c" - gain or charge-injection gain,'\
              + '  default = %s' % d_proc
    h_paninds = 'comma-separated panel indexds to generate constants for subset of panels (ex.: quad from 2M), default = %s' % d_paninds
    h_dirmode = 'mode for all mkdir, default = %s' % oct(d_dirmode)
    h_filemode= 'mode for all saved files, default = %s' % oct(d_filemode)
    h_group   = 'group ownership for all files, default = %s' % d_group

    parser = OptionParser(description=usage(1), usage = usage())
    parser.add_option('-e', '--exp',     default=d_exp,     action='store', type='string', help=h_exp)
    parser.add_option('-d', '--det',     default=d_det,     action='store', type='string', help=h_det)
    parser.add_option('-r', '--run',     default=d_run,     action='store', type='int',    help=h_run)
    parser.add_option('-t', '--tstamp',  default=d_tstamp,  action='store', type='int',    help=h_tstamp)
    parser.add_option('-x', '--dsnamex', default=d_dsnamex, action='store', type='string', help=h_dsnamex)
    parser.add_option('-o', '--dirrepo', default=d_dirrepo, action='store', type='string', help=h_dirrepo)
    parser.add_option('-c', '--dircalib',default=d_dircalib,action='store', type='string', help=h_dircalib)
    parser.add_option('-D', '--deploy',  default=d_deploy,  action='store_true',           help=h_deploy)
    parser.add_option('-E', '--errskip', default=d_errskip, action='store_true',           help=h_errskip)
    parser.add_option('-L', '--logmode', default=d_logmode, action='store', type='string', help=h_logmode)
    parser.add_option(      '--high',    default=d_high,    action='store', type='float',  help=h_high)
    parser.add_option(      '--medium',  default=d_medium,  action='store', type='float',  help=h_medium)
    parser.add_option(      '--low',     default=d_low,     action='store', type='float',  help=h_low)
    parser.add_option('-p', '--proc',    default=d_proc,    action='store', type='string', help=h_proc)
    parser.add_option('-I', '--paninds', default=d_paninds, action='store', type='string', help=h_paninds)
    parser.add_option('--runend',        default=d_runend,  action='store', type='string', help=h_runend)
    parser.add_option('--dirmode',       default=d_dirmode, action='store', type='int',    help=h_dirmode)
    parser.add_option('--filemode',      default=d_filemode,action='store', type='int',    help=h_filemode)
    parser.add_option('--group',         default=d_group,   action='store', type='string', help=h_group)

    return parser


if __name__ == "__main__":
    if len(sys.argv)==1: sys.exit('\n%s\n' % usage(2))
    else: epix10ka_deploy_constants()
    sys.exit(0)

# EOF
