#!/usr/bin/env python

import sys
import Detector.UtilsLogging as ul
logger = ul.logging.getLogger(__name__)

from Detector.dir_root import os, DIR_ROOT, DIR_REPO_STATUS, DIR_LOG_AT_START

SCRNAME = sys.argv[0].split('/')[-1]

DESCRIPTION = 'Proceses raw (light) data from any detector and evaluate pixel status'

USAGE ='\n%s -d <dataset> -s <source> ...' % SCRNAME\
      +'\nEx.1:  %s -o work -n 1000 --nrecs 100 --snrmax 8 # test command' % SCRNAME\
      +'\nEx.2:  %s -d exp=xpplw3319:run=293 -s XppGon.0:Epix100a.3 # regular processing command' % SCRNAME\
      +'\n\nHelp:  %s -h\n' % SCRNAME

def argument_parser():
    from argparse import ArgumentParser
    d_dirrepo= DIR_REPO_STATUS  # 'work' # './panels' '/reg/g/psdm/detector/gains/jungfrau/panels'
    d_dsname = 'exp=xpplw3319:run=293'  # None
    d_source = 'epix_alc3'  # None
    d_events = 100
    d_evskip = 0
    d_stskip = None
    d_steps  = None
    d_slice  = '0:,0:'
    d_shwind = '15,15'
    d_snrmax  = 8.0
    d_int_lo = 1
    d_int_hi = 16000
    d_intnlo = 6.0
    d_intnhi = 6.0
    d_rms_lo = 0.001
    d_rms_hi = 16000
    d_rmsnlo = 6.0
    d_rmsnhi = 6.0
    d_fraclm = 0.1
    d_plotim = 0
    d_evcode = None
    d_upload = False
    d_segind = 0
    d_gmode  = None
    d_nrecs  = 1000
    d_fraclo = 0.05    # fraction of statistics [0,1] below low limit
    d_frachi = 0.95    # fraction of statistics [0,1] below high limit
    d_logmode = 'INFO'
    d_dirmode  = 0o2775
    d_filemode = 0o664
    d_group    = 'ps-users'
    d_databits = (1<<14)-1 # 0o37777  # 14 bits # 0o177777 - 16bit
    d_gainbits = 0
    d_ctype    = 'status_data'

    h_dsname  = 'dataset name, default = %s' % d_dsname
    h_source  = 'input ndarray source name, default = %s' % d_source
    h_events  = 'maximal number of events total (in runs, steps), default = %s' % d_events
    h_evskip  =  'number of events to skip in the beginning of each step, default = %s' % d_evskip
    h_stskip  = 'step/calibcycle number [0,2] or all by default, default = %s' % str(d_stskip)
    h_steps   = 'maximal number of steps or all by default, default = %s' % str(d_steps)
    h_int_lo  = 'intensity low limit, default = %s' % d_int_lo
    h_int_hi  = 'intensity high limit, default = %s' % d_int_hi
    h_intnlo  = 'number of sigma from mean for low limit on INTENSITY, default = %s' % d_intnlo
    h_intnhi  = 'number of sigma from mean for high limit on INTENSITY, default = %s' % d_intnhi
    h_rms_lo  = 'rms low limit, default = %s' % d_rms_lo
    h_rms_hi  = 'rms high limit, default = %s' % d_rms_hi
    h_rmsnlo  = 'number of sigma from mean for low limit on RMS, default = %s' % d_rmsnlo
    h_rmsnhi  = 'number of sigma from mean for high limit on RMS, default = %s' % d_rmsnhi
    h_fraclm  = 'allowed fraction [0,1] limit, default = %s' % d_fraclm
    h_plotim  = 'control bit-word to plot images, default = %s' % d_plotim
    h_evcode  = 'comma separated event codes for selection as OR combination, any negative %s'%\
                'code inverts selection, default = %s'%str(d_evcode)
    h_upload  = 'deprecated and not used, default = %s' % d_upload
    h_segind  = 'segment index to process, use it for multi-panel detectors with raw.shape.ndim>2, default = %s' % str(d_segind)
    h_gmode   = 'gain mode name, use it for multi-gain detectors with raw.shape.ndim>3, ex: AHL-H, default = %s' % str(d_gmode)
    h_nrecs   = 'number of records to collect data, default = %s' % str(d_nrecs)
    h_fraclo  = 'fraction of statistics [0,1] below low  limit of the gate, default = %f' % d_fraclo
    h_frachi  = 'fraction of statistics [0,1] below high limit of the gate, default = %f' % d_frachi
    h_dirrepo = 'repository for cadd_argumentalibration results, default = %s' % d_dirrepo
    h_logmode = 'logging mode, one of %s, default = %s' % (ul.STR_LEVEL_NAMES, d_logmode)
    h_dirmode = 'mode for all mkdir, default = %s' % oct(d_dirmode)
    h_filemode= 'mode for all saved files, default = %s' % oct(d_filemode)
    h_group   = 'group ownership for all files, default = %s' % d_group
    h_slice   = 'FOR DEBUGGING ONLY (str) slice of the panel image 2-d array selected for plots and pixel status, ex. "0:144,0:192", default = %s' % d_slice
    h_shwind   = 'window shape for feature 6 fitting to plane, ex. "15,15", default = %s' % d_shwind
    h_snrmax   = 'width of the good region in terms on number of spreads, default = %s' % d_snrmax
    h_databits = 'data bits in ADC for code of intensity, default = %s' % oct(d_databits)
    h_gainbits = 'gain mode switch bits in ADC, default = %s' % oct(d_gainbits)
    h_ctype    = 'type of calibration constants to save, default = %s' % d_ctype

    parser = ArgumentParser(description=DESCRIPTION, usage=USAGE)
    parser.add_argument('-d', '--dsname',   default=d_dsname,   type=str,   help=h_dsname)
    parser.add_argument('-s', '--source',   default=d_source,   type=str,   help=h_source)
    parser.add_argument('-n', '--events',   default=d_events,   type=int,   help=h_events)
    parser.add_argument('-m', '--evskip',   default=d_evskip,   type=int,   help=h_evskip)
    parser.add_argument('-N', '--steps',    default=d_steps,    type=int,   help=h_steps)
    parser.add_argument('-M', '--stskip',   default=d_stskip,   type=int,   help=h_stskip)
    parser.add_argument('-c', '--evcode',   default=d_evcode,   type=str,   help=h_evcode)
    parser.add_argument('-i', '--segind',   default=d_segind,   type=int,   help=h_segind)
    parser.add_argument('-S', '--slice',    default=d_slice,    type=str,   help=h_slice)
    parser.add_argument('-r', '--nrecs',    default=d_nrecs,    type=int,   help=h_nrecs)
    parser.add_argument('-w', '--shwind',   default=d_shwind,   type=str,   help=h_shwind)
    parser.add_argument('-R', '--snrmax',   default=d_snrmax,   type=float, help=h_snrmax)
    parser.add_argument('-t', '--ctype',    default=d_ctype,    type=str,   help=h_ctype)
    parser.add_argument('-L', '--logmode',  default=d_logmode,  type=str,   help=h_logmode)
    parser.add_argument('-o', '--dirrepo',  default=d_dirrepo,  type=str,   help=h_dirrepo)
    parser.add_argument('--dirmode',        default=d_dirmode,  type=int,   help=h_dirmode)
    parser.add_argument('--filemode',       default=d_filemode, type=int,   help=h_filemode)
    parser.add_argument('--group',          default=d_group,    type=str,   help=h_group)
    parser.add_argument('--databits',       default=d_databits, type=int,   help=h_databits)
    parser.add_argument('--gainbits',       default=d_gainbits, type=int,   help=h_gainbits)
    parser.add_argument('--gmode',          default=d_gmode,    type=int,   help=h_gmode)
#    parser.add_argument('-p', '--plotim',   default=d_plotim,   type=int,   help=h_plotim)
#    parser.add_argument('-u', '--upload',   default=d_upload,   action='store_true', help=h_upload)

    return parser


if __name__ == "__main__":

    if len(sys.argv)<2:
        print('%s\n%s\n%s' % (40*'_', DESCRIPTION, USAGE))
        sys.exit('MISSING COMMAND LINE PARAMETERS')

    parser = argument_parser()
    args = parser.parse_args()
    kwargs = vars(args)
    #print('Arguments: %s\n' % str(args))

    import PSCalib.GlobalUtils as gu
    import Detector.RepoManager as rm
    import Detector.UtilsCalib as uc
    import Detector.UtilsRawPixelStatus as rps

    if 'work' in args.dirrepo: DIR_LOG_AT_START = args.dirrepo

    repoman = rm.RepoManager(args.dirrepo, dir_log_at_start=DIR_LOG_AT_START,\
                             dirmode=args.dirmode, filemode=args.filemode, group=args.group)
    logname = repoman.logname('%s_%s' % (SCRNAME, gu.get_login()))
    ul.init_logger(loglevel=args.logmode, logfname=logname, group=args.group, fmt='[%(levelname).1s] %(filename)s L%(lineno)04d %(message)s')
    logger.info('log file: %s' % logname)
    repoman.save_record_at_start(SCRNAME, adddict={'logfile':logname})

    import Detector.GlobalUtils as dgu
    logger.info(dgu.info_command_line_parameters(parser))

    args.repoman = repoman
    rps.det_raw_pixel_status(args)

    import os
    os.chmod(logname, args.filemode)
    uc.cgu.change_file_ownership(logname, user=None, group=args.group)

    sys.exit(0)

# EOF


