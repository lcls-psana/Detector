#!/usr/bin/env python

import sys
from Detector.UtilsLogging import STR_LEVEL_NAMES, DICT_NAME_TO_LEVEL, logging
logger = logging.getLogger(__name__)

SCRNAME = sys.argv[0].rsplit('/')[-1]

USAGE = '  %s -d <dataset-name> -s <detector-name> -n <number-of-events> -m <number-events-to-skip>'%SCRNAME\
      + '\nexample: %s -d exp=xpptut15:run=260 -s XcsEndstation.0:Epix100a.1 -n 10'%SCRNAME

if len(sys.argv)<3: sys.exit('%s\n EXIT - MISSING ARGUMENTS\n' % USAGE)

def argument_parser():
    import argparse

    d_dsname   = 'exp=xpptut15:run=260'
    d_detname  = 'XcsEndstation.0:Epix100a.1'
    d_events   = 10
    d_evskip   = 0
    d_logmode  = 'INFO'
    d_calibdir = None #/reg/neh/operator/mecopr/calib/
    d_slice    = ':'
    d_prefix   = 'det-calib'
    d_mode     = 'c'

    h_dsname   = 'dataset name, default = %s' % d_dsname
    h_detname  = 'detector name, default = %s' % d_detname
    h_events   = 'number of events to collect, default = %s' % d_events
    h_evskip   = 'number of events to skip, default = %s' % d_evskip
    h_logmode  = 'logging mode, one of %s, default = %s' % (STR_LEVEL_NAMES, d_logmode)
    h_calibdir = 'calibration directory, default = %s' % str(d_calibdir)
    h_slice    = 'array slice, default = %s' % str(d_slice)
    h_prefix   = 'output file name prefix, default = %s' % str(d_prefix)
    h_mode     = 'mode of data: r/c/i/p : raw/calib/image/raw-peds default = %s' % str(d_slice)

    parser = argparse.ArgumentParser(usage=USAGE, description='Accumulates det.calib array average and max')
    parser.add_argument('-d', '--dsname',   default=d_dsname,   type=str,   help=h_dsname)
    parser.add_argument('-s', '--detname',  default=d_detname,  type=str,   help=h_detname)
    parser.add_argument('-n', '--events',   default=d_events,   type=int,   help=h_events)
    parser.add_argument('-m', '--evskip',   default=d_evskip,   type=int,   help=h_evskip)
    parser.add_argument('-L', '--logmode',  default=d_logmode,  type=str,   help=h_logmode)
    parser.add_argument('-c', '--calibdir', default=d_calibdir, type=str,   help=h_calibdir)
    parser.add_argument('-S', '--slice',    default=d_slice,    type=str,   help=h_slice)
    #parser.add_argument('-f', '--prefix',   default=d_prefix,   type=str,   help=h_prefix)
    #parser.add_argument('-M', '--mode',     default=d_mode,     type=str,   help=h_mode)

    return parser

parser = argument_parser()
args = parser.parse_args()
print('parser.parse_args: %s' % str(args))

import numpy as np
from psana import DataSource, Detector, setOption
from Detector.GlobalUtils import info_ndarr, selected_record

dsname   = args.dsname
detname  = args.detname
events   = args.events
evskip   = args.evskip
calibdir = args.calibdir
logmode  = args.logmode
slice    = args.slice
#prefix   = args.prefix
#mode     = args.mode
aslice = eval('np.s_[%s]' % slice)

logging.basicConfig(format='[%(levelname).1s] %(name)s L%(lineno)04d: %(message)s', level=DICT_NAME_TO_LEVEL[logmode])


if True:
    if calibdir is not None:
        setOption('psana.calib-dir', calibdir)
        logging.info('set non-default psana.calib-dir:' + str(calibdir))

    ds = DataSource(dsname)
    det = Detector(detname)
    logging.info('det.shape:' + str(det.shape()))

    #import _psana
    #cfg = ds.env().configStore()
    #c = cfg.get(_psana.Epix.Config10kaV1, det.source)
    #print 'numberOfRows, numberOfColumns', c.numberOfRows(), c.numberOfColumns()

    i = 0
    for i, evt in enumerate(ds.events()):

        logging.info('%s\nEvent %4d' % (50*'_', i))

        if i<evskip: continue
        if i>events: break

        raw = det.raw(evt)[aslice]
        logging.info(info_ndarr(raw, 'raw'))

        if raw is None:
            logging.warning('raw is None')
            continue

        calib = det.calib(evt)[aslice]
        logging.info(info_ndarr(calib, 'calib'))

        img = det.image(evt)[aslice]
        logging.info(info_ndarr(img, 'img'))

    sys.exit('END OF %s' % SCRNAME)

# EOF
