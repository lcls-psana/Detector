#!/usr/bin/env python
"""
Intended to plot different types of jungfrau detector images.

See:
  - `github: <https://github.com/slac-lcls/lcls2>`_.

Created on 2022-02-16 by Mikhail Dubrovin
"""

from __future__ import print_function

import os
os.environ['LIBGL_ALWAYS_INDIRECT'] = '1' # get rid of libGL error: unable to load driver: swrast_dri.so

from time import time
t0_sec = time()

import sys
import numpy as np
import argparse
from Detector.UtilsLogging import STR_LEVEL_NAMES, DICT_NAME_TO_LEVEL, logging
logger = logging.getLogger(__name__)

import psana
from Detector.GlobalUtils import info_ndarr, print_ndarr, selected_record, divide_protected
from Detector.PyDataAccess import get_jungfrau_config_object, get_jungfrau_data_object
from Detector.UtilsGraphics import gr, fleximagespec, fleximage, flexhist, axis_plot
from Detector.UtilsJungfrau import map_gain_range_index, event_constants, gain_range_maps_jungfrau
from Detector.UtilsCalib import info_pixel_status, str_tstamp
import PSCalib.GlobalUtils as gu

print('TIME import time = %.6f sec' % (time()-t0_sec))
t0_sec = time()

SCRNAME = sys.argv[0].rsplit('/')[-1]
USAGE = '\n    %s -t1' % SCRNAME\
      + '\n    %s -e cxic00120 -d jungfrau4M -r42 -t1' % SCRNAME\
      + '\n    %s -e cxic00120 -d jungfrau4M -r42 -c calib -t102' % SCRNAME\
      + '\n    %s -e xpptut15 -r 380 -d DscCsPad -t14' % SCRNAME\
      + '\n    %s -e xpptut15 -r 230 -d cs140_0 -t14 -s0 -N10' % SCRNAME\
      + '\n    %s -e xpptut15 -r 260 -d epix100a_diff -t14' % SCRNAME\
      + '\n    %s -e xpptut15 -r 450 -d pnccd -t14' % SCRNAME\
      + '\n    %s -e xpptut15 -r 550 -d epix10k2M -t14' % SCRNAME\
      + '\n    -t, --tname - test name/number:'\
      + '\n      1 - segment index'\
      + '\n      2 - raw'\
      + '\n      3 - calib - default'\
      + '\n      3 - calib with common mode'\
      + '\n      5 - pedestals'\
      + '\n      6 - rms'\
      + '\n      7 - status'\
      + '\n      8 - gain, ADU/keV'\
      + '\n      9 - per event gain range index [0,1,2]'\
      + '\n     10 - raw-peds'\
      + '\n     11 - (raw-peds)/gain, keV'\
      + '\n     12 - det.mask'\
      + '\n     13 - custom mask'\
      + '\n  Spec projects'\
      + '\n    100 - mask from file'\
      + '\n    101 - status_as_mask(evt, mode=3, mstcode=63)'\
      + '\n    102 - status_as_mask(evt, mode=3, mstcode=64)'\
      + '\n    103 - status_as_mask(evt, mode=3, mstcode=127)'\

d_tname   = '1'
d_detname = 'CxiDs1.0:Jungfrau.0'
d_expname = 'cxic00120'
d_calibdir= None
d_run     = 42
d_events  = 2
d_evskip  = 0
d_stepnum = None
d_ofpref  = '%s-figs-jf/img' % str_tstamp(fmt='%Y-%m-%d')#, time_sec=time())
d_ofsuff  = None
d_segindex= None
d_grindex = None
d_amin    = None
d_amax    = None
d_fraclo  = 0.005
d_frachi  = 0.995
d_cframe  = 0
d_loglev  = 'INFO'
d_saveimg = False

parser = argparse.ArgumentParser(usage=USAGE, description='%s - test per-event components of the det.raw.calib method'%SCRNAME)
parser.add_argument('-t', '--tname',   default=d_tname,   type=str, help='test name, def=%s' % d_tname)
parser.add_argument('-d', '--detname', default=d_detname, type=str, help='detector name, def=%s' % d_detname)
parser.add_argument('-e', '--expname', default=d_expname, type=str, help='experiment name, def=%s' % d_expname)
parser.add_argument('-c', '--calibdir',default=d_calibdir,type=str, help='non-default calib directory, def=%s' % d_calibdir)
parser.add_argument('-r', '--run',     default=d_run,     type=int, help='run number, def=%s' % d_run)
parser.add_argument('-N', '--events',  default=d_events,  type=int, help='maximal number of events, def=%s' % d_events)
parser.add_argument('-K', '--evskip',  default=d_evskip,  type=int, help='number of events to skip in the beginning of run, def=%s' % d_evskip)
parser.add_argument('-s', '--stepnum', default=d_stepnum, type=int, help='step number counting from 0 or None for all steps, def=%s' % d_stepnum)
parser.add_argument('-o', '--ofpref',  default=d_ofpref,  type=str, help='output file prefix, def=%s' % d_ofpref)
parser.add_argument('-S', '--ofsuff',  default=d_ofsuff,  type=str, help='output file suffix, save file if it is not None, def=%s' % d_ofsuff)
parser.add_argument('-i', '--segindex',default=d_segindex,type=int, help='segment index [0,7], def=%s' % str(d_segindex))
parser.add_argument('-g', '--grindex', default=d_grindex, type=int, help='gain range index [0,2] for peds, gains etc., def=%s' % str(d_grindex))
parser.add_argument('-l', '--loglev',  default=d_loglev,  type=str, help='logger level (DEBUG, INFO, WARNING, etc.), def.=%s' % str(d_loglev))
parser.add_argument('--amin',          default=d_amin,    type=float, help='spectrum minimal value, def=%s' % str(d_amin))
parser.add_argument('--amax',          default=d_amax,    type=float, help='spectrum maximal value, def=%s' % str(d_amax))
parser.add_argument('--fraclo',        default=d_fraclo,  type=float, help='fraction of events for spectrum minimal value, def=%s' % str(d_fraclo))
parser.add_argument('--frachi',        default=d_frachi,  type=float, help='fraction of events for spectrum maximal value, def=%s' % str(d_frachi))
parser.add_argument('--cframe',        default=d_cframe,  type=int, help='coordinate frame for images 0/1 for psana/LAB, def=%s' % str(d_cframe))

args = parser.parse_args()
print('parser.parse_args: %s' % str(args))

logfmt =  '[%(levelname).1s] L%(lineno)04d: %(message)s' if args.loglev == 'INFO' else\
          '[%(levelname).1s] %(name)s L%(lineno)04d: %(message)s'

logging.basicConfig(format=logfmt, level=DICT_NAME_TO_LEVEL[args.loglev])
#logging.getLogger('matplotlib').setLevel(logging.WARNING)
#logging.getLogger('psana.psexp.event_manager').setLevel(logging.INFO)

tname = args.tname # sys.argv[1] if len(sys.argv) > 1 else '0'
THRMIN = 100
THRMAX = 500
AMIN   = 1
AMAX   = 200
MDB    = 0x3fff
shape_seg = (512, 1024)

flims  = None
fname = 'ims.png'
prefix = 'ims-%s-r%04d' % (args.expname, args.run)
figsc, axsc = None, None

cmpars=(7,7,100,10)
s_cmpars = '-'.join([str(v) for v in cmpars])

dsname = 'exp=%s:run=%d:smd' % (args.expname, args.run)
runnum   = args.run
detname  = args.detname
tname    = args.tname
segind   = args.segindex if args.segindex else 0
calibdir = args.calibdir
grindex  = args.grindex
fraclo   = args.fraclo
frachi   = args.frachi
ofpref   = args.ofpref
ofsuff   = args.ofsuff


def quantile_amin_amax(arr, fraclo=0.05, frachi=0.95):
    return np.quantile(arr, fraclo, interpolation='lower'),\
           np.quantile(arr, frachi, interpolation='higher')


def amin_amax(args, amin_def=None, amax_def=None):
    return args.amin if args.amin else amin_def,\
           args.amax if args.amax else amax_def


def event_or_grindex_constants(cons, grindex=None, grmaps=None, default=0):
    """        cons.shape = (3, <nsegs>, 512, 1024)
       event_constants.shape = (<nsegs>, 512, 1024)
    """
    return cons[grindex,:] if grindex is not None else\
           event_constants(cons, grmaps, default=0)


print('TIME parameter initialization time = %.6f sec' % (time()-t0_sec))
t0_sec = time()

if calibdir is not None: psana.setOption('psana.calib-dir', calibdir)

ds  = psana.DataSource(dsname)
env = ds.env()
det = psana.Detector(detname)
cd  = psana.Detector('ControlData')

logger.info('experiment %s' % env.experiment())
logger.info('run        %d' % runnum)
logger.info('dataset    %s' % (dsname))
logger.info('detname    %s' % (detname))
logger.info('calibDir:  %s' % env.calibDir().replace('//','/')

print('TIME Detector initialization time = %.6f sec' % (time()-t0_sec))
t0_sec = time()

peds   = det.pedestals(runnum) if tname in ('5','10','11') else None
rms    = det.rms(runnum)       if tname in ('6',) else None
status = det.status(runnum)    if tname in ('7','101','102','103') else None
gain   = det.gain(runnum)      if tname in ('8','11') else None

print(info_ndarr(peds,'pedestals'))
print(info_ndarr(gain,'gain, ADU/keV'))
print(info_ndarr(rms,'rms'))
print('data bit mask: %s' % oct(MDB))

#sys.exit('TEST EXIT')

print('TIME loading constants time = %.6f sec' % (time()-t0_sec))
t0_sec = time()

arr, img = None, None
suffix = ''
evt_peds, evt_gfac = None, None

break_runs = False
break_steps = False
break_events = False

nstep = -1
for orun in ds.runs():

  env = orun.env()
  cfg = get_jungfrau_config_object(env, det.source)

  logger.info('\n=== run: %d' % orun.run())

  for nstep_in_run, step in enumerate(orun.steps()):

    nstep += 1
    print('%s\nrun: %04d step: %03d/%03d (in run/total)' % (50*'=', orun.run(), nstep, nstep_in_run), \
          '\n    ControlData pvControls, pvLabels, pvMonitors', cd().pvControls(), cd().pvLabels(), cd().pvMonitors()) # EMPTY: ,)

    for pvl in cd().pvLabels():
        print('  pvlabel: name="%s" v:' % pvl.name(), pvl.value(), ' type:', type(pvl.value()))

    if args.stepnum and nstep<args.stepnum:
        logger.info('    skip calibcycles nstep < --stepnum=%d' % args.stepnum)
        continue

    if args.stepnum and nstep>args.stepnum:
        logger.info('    break calibcycles, nstep > --stepnum=%d' % args.stepnum)
        break

    nevgood=-1
    for nev,evt in enumerate(step.events()):

      if nev < args.evskip:
          logger.info('Ev:%6d skip, nev < --evskip=%d' % (nev, args.evskip))
          continue

      if nev > args.events:
          logger.info('Ev:%6d break, nev > --events=%d' % (nev, args.events))
          break

      raw = det.raw(evt)

      if raw is None:
          logger.info('Ev:%6d raw is None' % nev)
          continue

      step_evt = 's%02d-e%04d' % (nstep, nev)

      nevgood += 1
      logger.info(info_ndarr(raw, 'Ev:%6d raw' % nev))

      grmaps = gain_range_maps_jungfrau(det, evt, nda_raw=None) if grindex is None else None

      arr, img = None, None

      if tname=='1':
        suffix = 'segment-nums'
        ones = np.ones(shape_seg) # det.raw._seg_geo.shape()) # (352,384)
        seginds = range(raw.shape[0]) # det.raw._segment_indices() #_segments(evt)
        logger.info('seginds %s' % str(seginds))
        arr = np.stack([ones*i for i in seginds])
        logger.info(info_ndarr(arr, ' arr'))
        AMIN, AMAX = 0, raw.shape[0]
        break_steps = break_run = break_events = True

      elif tname=='2':
        suffix = 'raw-%s' % step_evt
        arr = raw & MDB
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)

      elif tname=='3':
        suffix = 'calib-%s' % (step_evt)
        arr = det.calib(evt)
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)
        logger.info(info_ndarr(arr, '  calib'))

      elif tname=='4':
        suffix = 'calib-%s-cm-%s' % (step_evt, s_cmpars)
        arr = det.calib(evt, cmpars=cmpars)
        AMIN, AMAX = amin_amax(args, amin_def=-5, amax_def=+5)
        logger.info(info_ndarr(cmpars, '  cmpars'))
        logger.info(info_ndarr(arr,    '  calib'))

      elif tname=='5':
        suffix = 'pedestals-%s-grindex-%s' % (step_evt, str(grindex))
        arr = event_or_grindex_constants(peds, grindex=grindex, grmaps=grmaps, default=0) #(<nsegs>, 512, 1024)
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)
        if grindex is not None: break_steps = break_run = break_events = True

      elif tname=='6':
        suffix = 'rms-%s-grindex-%s' % (step_evt, str(grindex))
        arr = event_or_grindex_constants(rms, grindex=grindex, grmaps=grmaps, default=0) #(<nsegs>, 512, 1024)
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)
        if grindex is not None: break_steps = break_run = break_events = True

      elif tname=='7':
        suffix = 'status-%s-grindex-%s' % (step_evt, str(grindex))
        arr = event_or_grindex_constants(status, grindex=grindex, grmaps=grmaps, default=0) #(<nsegs>, 512, 1024)
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)
        if grindex is not None: break_steps = break_run = break_events = True

      elif tname=='8':
        suffix = 'gain-ADU-per-keV-%s-grindex-%s' % (step_evt, str(grindex))
        arr = event_or_grindex_constants(gain, grindex=grindex, grmaps=grmaps, default=0) #(<nsegs>, 512, 1024)
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)
        if grindex is not None: break_steps = break_run = break_events = True

      elif tname=='9':
        suffix = 'gain-range-index-%s' % step_evt
        arr = map_gain_range_index(det, evt)+0.1
        AMIN, AMAX = amin_amax(args, amin_def=-1, amax_def=3)

      elif tname=='10':
        suffix = 'raw-peds-%s' % step_evt
        evt_peds = event_or_grindex_constants(peds, grindex=grindex, grmaps=grmaps, default=0)
        arr = (raw & MDB) - evt_peds
        arr[0,10:30,10:100] = -20
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)
        #AMIN, AMAX = amin_amax(args, amin_def=-40, amax_def=40)

      elif tname=='11':
        suffix = 'raw-peds-x-gain-%s' % step_evt
        evt_peds = event_or_grindex_constants(peds, grindex=grindex, grmaps=grmaps, default=0)
        evt_gain = event_or_grindex_constants(gain, grindex=grindex, grmaps=grmaps, default=1)
        evt_gfac = divide_protected(np.ones_like(evt_gain), evt_gain)
        arr = ((raw & MDB) - evt_peds)*evt_gfac
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)

      elif tname=='12':
        suffix = 'det_mask'
        arr = 1 + det.mask(evt, calib=False, status=True, edges=True, central=True, unbond=False, unbondnbrs=False, mode=0o377, width=5, wcentral=5, mstcode=0xffff)
        AMIN, AMAX = 0,2 # amin_amax(args, amin_def=-1, amax_def=3)
        break_steps = break_run = break_events = True

      elif tname=='13':
        suffix = 'custom_mask'
        mask = det.status_as_mask(evt, mstcode=0o377) # mode=0 - by default do not mask neighbors
        mask = gu.mask_neighbors_in_radius(mask, rad=6, ptrn='r')
        mask = gu.merge_masks(mask, det.mask_geo(evt, width=10, wcentral=5)) # mbits=0o377, where 1-edges, 2-central, 4-non-bonded for cspad2x1, ... neighbors
        #mask = gu.merge_masks(mask, gu.mask_edges(mask, mrows=2, mcols=4)) # masks each segment edges only
        mask = gu.merge_masks(mask, det.mask_calib(evt))
        arr = 1 + mask
        AMIN, AMAX = 0,2 # amin_amax(args, amin_def=-1, amax_def=3)
        break_steps = break_run = break_events = True

      elif tname=='14':
        suffix = 'det_mask_total'
        kwa={'status'   :True, 'mstcode':0o377, 'indexes':(0,1,2,3,4),\
             'unbond'   :True,\
             'neighbors':True, 'rad':5, 'ptrn':'r',\
             'edges'    :True, 'mrows':2, 'mcols':4,\
             'central'  :True, 'wcentral':10}
        arr = 1 + det.mask_total(evt, **kwa)
        #arr = 1 + det.mask_v2(evt, status=False, unbond=False, neighbors=True, edges=False, central=False, calib=False)#, **kwa)
        AMIN, AMAX = 0,2 # amin_amax(args, amin_def=-1, amax_def=3)
        break_steps = break_run = break_events = True

      elif tname=='15':
        suffix = 'det_calib_mask_total-%s' % (step_evt)
        kwa={'status'   :True, 'mstcode':0o377, 'indexes':(0,1,2,3,4),\
             'unbond'   :True,\
             'neighbors':True, 'rad':5, 'ptrn':'r',\
             'edges'    :True, 'mrows':2, 'mcols':4,\
             'central'  :True, 'wcentral':10}
        arr = det.calib(evt, **kwa)
        AMIN, AMAX = -1,4 #quantile_amin_amax(arr, fraclo, frachi)
        logger.info(info_ndarr(arr, '  calib_with_mask_total'))
        #break_steps = break_run = break_events = True

      elif tname=='100':
        suffix = 'mask-from-file'
        ifname = 'fd-mask-8-512-1024-float64.npy'
        print('load mask array from file %s' % ifname)
        arr = 1 + np.load(ifname)
        AMIN, AMAX = 0,2
        break_steps = break_run = break_events = True

      elif tname=='101':
        suffix = 'status_as_mask-mstcode063'
        arr = det.status_as_mask(evt, mode=1, mstcode=63)
        arr = 1 + gu.mask_neighbors_in_radius(arr, rad=9, ptrn='r') #rad=9 for comp with test 100
        AMIN, AMAX = 0,2 # amin_amax(args, amin_def=-1, amax_def=3)
        break_steps = break_run = break_events = True

        statusm = gu.merge_status(status)
        print('Merged for 3 gain modes status')
        print('%s run:%d status.shape:%s size: %d' % (args.expname, args.run, str(statusm.shape), statusm.size))
        print('bad pixels w/o sw:', info_pixel_status(statusm, bits=63))
        print('bad pixels switch:', info_pixel_status(statusm, bits=64))
        print('bad pixels total :', info_pixel_status(statusm, bits=127))

      elif tname=='102':
        suffix = 'status_as_mask-mstcode064'
        arr = det.status_as_mask(evt, mode=1, mstcode=64)
        arr = 1 + gu.mask_neighbors_in_radius(arr, rad=9, ptrn='r') #rad=9 for comp with test 100
        AMIN, AMAX = 0,2 #  amin_amax(args, amin_def=0, amax_def=3)
        break_steps = break_run = break_events = True

      elif tname=='103':
        suffix = 'status_as_mask-mstcode127'
        arr = det.status_as_mask(evt, mode=1, mstcode=127)
        arr = 1 + gu.mask_neighbors_in_radius(arr, rad=9, ptrn='r') #rad=9 for comp with test 100
        AMIN, AMAX = 0,2 #  amin_amax(args, amin_def=0, amax_def=3)
        break_steps = break_run = break_events = True

      else: # elif tname=='9':
        suffix = 'calib-%s-cm-%s' % (step_evt, s_cmpars)
        arr = det.calib(evt, cmpars=cmpars)
        AMIN, AMAX = quantile_amin_amax(arr, fraclo, frachi)

      print('AMIN:%.1f  AMAX:%.1f' % (AMIN, AMAX))

      print(info_ndarr(arr,'Event %d det.calib'%nev))
      if arr is not None:
        med, std = np.median(arr), np.std(arr)
        logger.info('array median %.3f std %.3f' % (med,std))

      if img is None: img = det.image(evt, nda_in=arr) #, cframe=args.cframe)


      print(info_ndarr(img,'  img'))

      title = '%s-r%04d-%s-%s-t%s-%s' % (env.experiment(), runnum, step_evt, detname.replace(':','_').replace('.','_'), tname, suffix)

      if flims is None:
        flims = fleximagespec(img, arr=arr, bins=100, w_in=16.4, h_in=12, amin=AMIN, amax=AMAX) #fraclo=0.01, frachi=0.99, interpolation='nearest'
        flims.axtitle(title)
        flims.move(5,5)
      else:
        flims.update(img, arr=arr, amin=AMIN, amax=AMAX)#, interpolation='nearest')
        flims.axtitle(title)

      gr.show(mode=1)

      if args.ofsuff is not None:
          gu.create_directory_with_mode(ofpref.rsplit('/',1)[0], mode=0o2770, verb=True)
          flims.save('%s-%s-%s.png'%(ofpref, title, ofsuff))

      if break_events: break
    if break_steps: break
  if break_runs: break

gr.show()

#if args.saveimg: flims.save(fname)

sys.exit('END OF %s -t %s' % (SCRNAME, tname))

# EOF
