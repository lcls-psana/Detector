#!/usr/bin/env python

import sys

import Detector.UtilsGeometryDeploy as ugd

CALIB_REPO_GEOMETRY = '/reg/g/psdm/detector/calib/geometry/'
DIR_LOG_AT_START = '/reg/g/psdm/logs/atstart/'

SCRNAME = sys.argv[0].split('/')[-1]

DESCRIPTION = 'Deployment of geometry calibration parameters'

USAGE = '\n%s -e <experiment> -d <detector> -r <run-number> [-D] [-L <logging-mode>] [...]' % SCRNAME\
      + '\n\nREGULAR COMMAND EXAMPLE:'\
      + '\n  %s -e cxilu9218 -d CxiDs1.0:Jungfrau.0 -r238 --posz -100000 --posx 0 --posy 0 --rotz 90 -D --runrange 10-20' % SCRNAME\
      + '\n\nTEST COMMANDS:'\
      + '\nEx.1  for Cspad CXI    : %s -e xpptut15 -r 380 -d CxiDs1.0:Cspad.0 -D -c ./calib' % SCRNAME\
      + '\nEx.2  for Cspad CXI    : %s -e xpptut15 -r 380 -d CxiDs2.0:Cspad.0 -D -c ./calib' % SCRNAME\
      + '\nEx.3  for Cspad XPP    : %s -e xpptut15 -r 320 -d XppGon.0:Cspad.0 -D -c ./calib' % SCRNAME\
      + '\nEx.4  for cspad2x2     : %s -e xpptut15 -r 460 -d MecTargetChamber.0:Cspad2x2.3 -D -c ./calib --posz -100000 --posx 10 --posy -20 --rotz 90' % SCRNAME\
      + '\nEx.5  for jungfrau512k : %s -e xpptut15 -r 410 -d MfxEndstation.0:Jungfrau.1 -D -c ./calib' % SCRNAME\
      + '\nEx.6  for jungfrau1M   : %s -e xpptut15 -r 430 -d MfxEndstation.0:Jungfrau.0 -D -c ./calib' % SCRNAME\
      + '\nEx.7  for jungfrau4M   : %s -e xpptut15 -r 530 -d DetLab.0:Jungfrau.2 -D -c ./calib' % SCRNAME\
      + '\nEx.8  for epix10ka2m   : %s -e xpptut15 -r 570 -d MfxEndstation.0:Epix10ka2M.0 -D -c ./calib' % SCRNAME\
      + '\nEx.9  for epix100a     : %s -e xpptut15 -r 260 -d XcsEndstation.0:Epix100a.1 -D -c ./calib' % SCRNAME\
      + '\nEx.10 for pnCCD        : %s -e xpptut15 -r 450 -d Camp.0:pnCCD.1 -D -c ./calib' % SCRNAME\
      + '\nEx.11 for epix10kaquad : %s -e xpptut15 -r 590 -d MecTargetChamber.0:Epix10kaQuad.0 -D -c ./calib' % SCRNAME\
      + '\nEx.12 for epix10kaquad : %s -e xpptut15 -r 590 -d MecTargetChamber.0:Epix10kaQuad.1 -D -c ./calib' % SCRNAME\
      + '\nEx.13 for epix10kaquad : %s -e xpptut15 -r 590 -d MecTargetChamber.0:Epix10kaQuad.2 -D -c ./calib' % SCRNAME\
      + '\nEx.14 for epix10kaquad : %s -e xpptut15 -r 590 -d MecTargetChamber.0:Epix10kaQuad.3 -D -c ./calib' % SCRNAME\
      + '\n\nHelp:  %s -h\n' % SCRNAME


if len(sys.argv)<2:
    print('%s\n%s\n%s' % (40*'_', DESCRIPTION, USAGE))
    sys.exit('MISSING COMMAND LINE PARAMETERS')


def argument_parser():
    import argparse

    d_dirstart = DIR_LOG_AT_START
    d_dirrepo  = CALIB_REPO_GEOMETRY
    d_exp      = None # 'mfxx32516'
    d_det      = None # 'NoDetector.0:Epix10ka.3'
    d_run      = None # 1021
    d_runrange = '0-end'
    d_tstamp   = None # 20180910111049
    d_dsname   = None # '<path>/xtc/<file-name>.xtc'
    d_dssuffix = None # ':smd:dir=<path>/xtc/'
    d_dircalib = None # './calib'
    d_deploy   = False
    d_loglev   = 'INFO'
    d_dirmode  = 0o777
    d_filemode = 0o666
    d_parent   = 'IP'
    d_posx     = 0
    d_posy     = 0
    d_posz     = -100000
    d_rotx     = 0
    d_roty     = 0
    d_rotz     = 0

    h_exp     = 'experiment name, default = %s' % d_exp
    h_det     = 'detector name, default = %s' % d_det
    h_run     = 'run number of the existing dataset to get run time-stamp, detector full name etc., default = %s' % str(d_run)
    h_runrange= 'validity run range for output calibration file, default = %s' % str(d_runrange)
    h_tstamp  = 'non-default time stamp (<YYYYmmddHHMMSS) or run number(<10000) for constants selection in repo. '\
                'By default run time is used, default = %s' % str(d_tstamp)
    h_dssuffix= 'dataset name suffix beyond exp=<expname>:run=<runnum><dssuffix>, for example ":smd:dir=<path>/xtc/", default = %s' % d_dssuffix
    h_dsname  = 'override exp=<expname>:run=<runnum><dssuffix>, e.g. with xtc file path/name, <path>/xtc/<file-name>.xtc", default = %s' % d_dsname
    h_dirstart= 'directory of the log file for at start records, default = %s' % d_dirstart
    h_dirrepo = 'non-default repository of calibration results, default = %s' % d_dirrepo
    h_dircalib= 'deployment calib directory if different from standard one, default = %s' % d_dircalib
    h_deploy  = 'deploy constants to the calib dir, default = %s' % d_deploy
    h_loglev  = 'logging mode, one of %s, default = %s' % (STR_LEVEL_NAMES, d_loglev)
    h_dirmode = 'mode for all mkdir, default = %s' % d_dirmode
    h_filemode= 'mode for all saved files, default = %s' % d_filemode
    h_parent  = 'parent frame name containing the detector geometry object, default = %s' % d_parent
    h_posx    = 'detector position x[um] relative IP, default = %f' % d_posx
    h_posy    = 'detector position y[um] relative IP, default = %f' % d_posy
    h_posz    = 'detector position z[um] relative IP, default = %f' % d_posz
    h_rotx    = 'detector rotation around axis x[degree] relative IP, default = %f' % d_rotx
    h_roty    = 'detector position around axis y[degree] relative IP, default = %f' % d_roty
    h_rotz    = 'detector position around axis z[degree] relative IP, default = %f' % d_rotz

    parser = argparse.ArgumentParser(usage=USAGE, description=DESCRIPTION)

    parser.add_argument('-e', '--exp',     default=d_exp,     type=str, help=h_exp)
    parser.add_argument('-d', '--det',     default=d_det,     type=str, help=h_det)
    parser.add_argument('-r', '--run',     default=d_run,     type=str, help=h_run)
    parser.add_argument('-t', '--tstamp',  default=d_tstamp,  type=int, help=h_tstamp)
    parser.add_argument('-s', '--dssuffix',default=d_dssuffix,type=str, help=h_dssuffix)
    parser.add_argument('-x', '--dsname',  default=d_dsname,  type=str, help=h_dsname)
    parser.add_argument('-o', '--dirrepo', default=d_dirrepo, type=str, help=h_dirrepo)
    parser.add_argument(      '--dirstart',default=d_dirstart,type=str, help=h_dirstart)
    parser.add_argument('-c', '--dircalib',default=d_dircalib,type=str, help=h_dircalib)
    parser.add_argument('-l', '--loglev',  default=d_loglev,  type=str, help=h_loglev)
    parser.add_argument('--dirmode',       default=d_dirmode, type=int, help=h_dirmode)
    parser.add_argument('--filemode',      default=d_filemode,type=int, help=h_filemode)
    parser.add_argument('-D', '--deploy',  default=d_deploy, action='store_true', help=h_deploy)
    parser.add_argument('-R', '--runrange',default=d_runrange,type=str, help=h_runrange)
    parser.add_argument('--parent',        default=d_parent,  type=str  , help=h_parent)
    parser.add_argument('--posx',          default=d_posx,    type=float, help=h_posx)
    parser.add_argument('--posy',          default=d_posy,    type=float, help=h_posy)
    parser.add_argument('--posz',          default=d_posz,    type=float, help=h_posz)
    parser.add_argument('--rotx',          default=d_rotx,    type=float, help=h_rotx)
    parser.add_argument('--roty',          default=d_roty,    type=float, help=h_roty)
    parser.add_argument('--rotz',          default=d_rotz,    type=float, help=h_rotz)

    return parser


if __name__ == "__main__":

    from Detector.UtilsLogging import STR_LEVEL_NAMES, init_logger, logging
    logger = logging.getLogger(__name__)

    import PSCalib.GlobalUtils as gu
    import Detector.UtilsCalib as uc

    parser = argument_parser()
    args = parser.parse_args()
    kwa = vars(args)
    print('Arguments: %s\n' % str(args))

    repoman = uc.RepoManager(args.dirrepo, dirmode=args.dirmode, filemode=args.filemode, dir_log_at_start=DIR_LOG_AT_START)
    logname = repoman.logname('%s_%s' % (SCRNAME, gu.get_login()))
    init_logger(loglevel=args.loglev, logfname=logname, fmt='[%(levelname).1s] %(filename)s L%(lineno)04d %(message)s')
    logger.info('log file: %s' % logname)
    repoman.save_record_at_start(SCRNAME)

    kwa['repoman'] = repoman
    ugd.geometry_deploy_constants(**kwa)

    sys.exit(0)

# EOF
