#!/usr/bin/env python

import os
import sys
import Detector.UtilsLogging as ul

logger = ul.logging.getLogger(__name__)
from Detector.dir_root import DIR_ROOT, DIR_LOG_AT_START
DIR_REPO_DARK = os.path.join(DIR_ROOT, 'detector/calib/constants/dark/')
#DIR_REPO = os.path.join(DIR_ROOT, 'detector/calib/constants/')

SCRNAME = sys.argv[0].split('/')[-1]
DESCRIPTION = 'Detector(s) dark raw data processing.'
USAGE = '       %s -d <dataset> [-s <source>] [-f <file-name-template>]' % SCRNAME\
      + ' [-n <events-collect>] [-m <events-skip>] [-v 7] [-p 1] [-v 7] ...'\
      + '\n  -v, -S control bit-words stand for 1/2/4/8/16/32/... - ave/rms/status/mask/max/min/sta_int_lo/sta_int_hi'\
      + '\nEx.1:  %s -d exp=cxif5315:run=169 -s CxiDs2.0:Cspad.0 -f nda.expand -n 20 -m 0 -v 7 -p 1' % SCRNAME\
      + '\nEx.2:  %s -d exp=mecj5515:run=102 -s MecTargetChamber.0:Cspad2x2.1,MecTargetChamber.0:Cspad2x2.2 -f nda-#exp-#run-#src-#type.txt -n 10' % SCRNAME\
      + '\nEx.3:  %s -d exp=amo42112:run=120:stream=0-79:xtc -s AmoBPS.0:Opal1000.0 -n 5 -f nda-#exp-#run-peds-#type-#src.txt' % SCRNAME\
      + '\nEx.4:  %s -d exp=xpptut15:run=240 -s XppEndstation.0:Rayonix.0 -n 100' % SCRNAME\


def argument_parser():
    import argparse

    d_dsname = None # 'exp=cxif5315:run=169'
    d_source = None # 'CxiDs2.0:Cspad.0'
    d_ofname = 'nda-#exp-#run-#src-#evts-#type-#date-#time-#fid-#sec-#nsec.txt'
    d_events = 1000
    d_evskip = 0
    d_intlow = 1
    d_inthig = 16000
    d_rmslow = 0.001
    d_rmshig = 16000
    d_fraclm = 0.1
    d_nsigma = 6.0
    d_plotim = 0
    d_verbos = 7
    d_savebw = 255
    d_intnlo = 6.0
    d_intnhi = 6.0
    d_rmsnlo = 6.0
    d_rmsnhi = 6.0
    d_evcode = None
    d_dirrepo= './work' #DIR_REPO_DARK
    d_logmode= 'INFO'
    d_dirmode= 0o2775
    d_filemode= 0o664
    d_group  = 'ps-users'
    d_nrecs1 = 50
    d_nrecs  = 1000

    h_dsname='dataset name, default = %s' % d_dsname
    h_source='input ndarray source name, default = %s' % d_source
    h_ofname='output file name template, default = %s' % d_ofname
    h_events='number of events to collect, default = %s' % d_events
    h_evskip='number of events to skip, default = %s' % d_evskip
    h_intlow='intensity low limit, default = %s' % d_intlow
    h_inthig='intensity high limit, default = %s' % d_inthig
    h_rmslow='rms low limit, default = %s' % d_rmslow
    h_rmshig='rms high limit, default = %s' % d_rmshig
    h_fraclm='allowed fraction limit, default = %s' % d_fraclm
    h_nsigma='number of sigma for gated average, default = %s' % d_nsigma
    h_plotim='control bit-word to plot images, default = %s' % d_plotim
    h_verbos='control bit-word for verbosity, default = %s' % oct(d_verbos)
    h_savebw='control bit-word to save arrays, default = %s' % oct(d_savebw)
    h_intnlo='number of sigma from mean for low  limit on INTENSITY, default = %s' % d_intnlo
    h_intnhi='number of sigma from mean for high limit on INTENSITY, default = %s' % d_intnhi
    h_rmsnlo='number of sigma from mean for low  limit on RMS, default = %s' % d_rmsnlo
    h_rmsnhi='number of sigma from mean for high limit on RMS, default = %s' % d_rmsnhi
    h_evcode='comma separated event codes for selection as OR combination, any negative code inverts selection, default = %s' % str(d_evcode)
    h_dirrepo='non-default repository of calibration results, default = %s' % d_dirrepo
    h_logmode= 'logging mode, one of %s, default = %s' % (ul.STR_LEVEL_NAMES, d_logmode)
    h_dirmode= 'mode for all mkdir, default = %s' % oct(d_dirmode)
    h_filemode= 'mode for all saved files, default = %s' % oct(d_filemode)
    h_group= 'group ownership for all files, default = %s' % d_group
    h_nrecs='number of events to process, default = %s' % d_nrecs
    h_nrecs1='number of events to process at stage 1, default = %s' % d_nrecs1

    parser = argparse.ArgumentParser(usage=USAGE, description=DESCRIPTION)
    parser.add_argument('-d', '--dsname',  default=d_dsname,  type=str,   help=h_dsname)
    parser.add_argument('-s', '--source',  default=d_source,  type=str,   help=h_source)
    parser.add_argument('-f', '--ofname',  default=d_ofname,  type=str,   help=h_ofname)
    parser.add_argument('-n', '--events',  default=d_events,  type=int,   help=h_events)
    parser.add_argument('-m', '--evskip',  default=d_evskip,  type=int,   help=h_evskip)
    parser.add_argument('-b', '--intlow',  default=d_intlow,  type=float, help=h_intlow)
    parser.add_argument('-t', '--inthig',  default=d_inthig,  type=float, help=h_inthig)
    parser.add_argument('-B', '--rmslow',  default=d_rmslow,  type=float, help=h_rmslow)
    parser.add_argument('-T', '--rmshig',  default=d_rmshig,  type=float, help=h_rmshig)
    parser.add_argument('-F', '--fraclm',  default=d_fraclm,  type=float, help=h_fraclm)
    parser.add_argument('-g', '--nsigma',  default=d_nsigma,  type=float, help=h_nsigma)
    parser.add_argument('-p', '--plotim',  default=d_plotim,  type=int,   help=h_plotim)
    parser.add_argument('-v', '--verbos',  default=d_verbos,  type=int,   help=h_verbos)
    parser.add_argument('-S', '--savebw',  default=d_savebw,  type=int,   help=h_savebw)
    parser.add_argument('-D', '--intnlo',  default=d_intnlo,  type=float, help=h_intnlo)
    parser.add_argument('-U', '--intnhi',  default=d_intnhi,  type=float, help=h_intnhi)
    parser.add_argument('-L', '--rmsnlo',  default=d_rmsnlo,  type=float, help=h_rmsnlo)
    parser.add_argument('-H', '--rmsnhi',  default=d_rmsnhi,  type=float, help=h_rmsnhi)
    parser.add_argument('-c', '--evcode',  default=d_evcode,  type=str,   help=h_evcode)
    parser.add_argument('-o', '--dirrepo', default=d_dirrepo, type=str,   help=h_dirrepo)
    parser.add_argument('--logmode',       default=d_logmode, type=str,   help=h_logmode)
    parser.add_argument('--dirmode',       default=d_dirmode, type=int,   help=h_dirmode)
    parser.add_argument('--filemode',      default=d_filemode,type=int,   help=h_filemode)
    parser.add_argument('--group',         default=d_group,   type=str,   help=h_group)
    parser.add_argument('--nrecs',         default=d_nrecs,   type=int,   help=h_nrecs)
    parser.add_argument('--nrecs1',        default=d_nrecs1,  type=int,   help=h_nrecs1)

    return parser


if __name__ == "__main__":

    if len(sys.argv)==1:
        print('%s\nHelp: %s -h' % (DESCRIPTION, SCRNAME))
        sys.exit(0)

    parser = argument_parser()
    opts = parser.parse_args()  # Namespace
    kwa = vars(opts)            # dict

    if opts.dsname is None: sys.exit('WARNING: dataset (-d <dataset>) must be specified.')
    if opts.source is None: sys.exit('WARNING: Data source (-s <source>) must be specified.')

    import Detector.UtilsCalib as uc
    import PSCalib.GlobalUtils as gu

    repoman = uc.RepoManager(dirrepo=opts.dirrepo, dir_log_at_start=DIR_LOG_AT_START,\
                             dirmode=opts.dirmode, filemode=opts.filemode, group=opts.group)
    logname = repoman.logname('%s_%s' % (SCRNAME, gu.get_login()))
    logname = None
    ul.init_logger(loglevel=opts.logmode, logfname=logname, group=opts.group, fmt='[%(levelname).1s] %(filename)s L%(lineno)04d %(message)s')
    repoman.save_record_at_start(SCRNAME, adddict={'logfile':logname})

    from Detector.GlobalUtils import info_command_line_parameters
    logger.info(info_command_line_parameters(parser))
    kwa['repoman'] = repoman

    import Detector.UtilsDarkProc as udp
    udp.det_ndarr_raw_proc(**kwa)

    logger.info('log file: %s' % logname)
    if logname is not None:
        os.chmod(logname, opts.filemode)
        uc.cgu.change_file_ownership(logname, user=None, group=opts.group)

    sys.exit(0)

# EOF
