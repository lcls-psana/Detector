#!/usr/bin/env python
#------------------------------
"""
  Merges panel gain and offset constants for specified experiment and jungfrau detector

  Created on 2018-04-30 by Mikhail Dubrovin
"""
from __future__ import print_function
#------------------------------

import logging
logger = logging.getLogger()

import os
import sys
import psana

import Detector.UtilsJungfrau as ju
from Detector.jungfrau_datasets import DSNAMES, DETNAMES
from pyimgalgos.GlobalUtils import print_command_line_parameters
from time import time
import PSCalib.GlobalUtils as gu # str_tstamp, deploy_file, log_rec_on_start, replace

#------------------------------

def usage():
    return  'Usage: jungfrau_gain_constants -d <DSNAME> [-s <DETNAME>] [-t <TSTAMP>] [-D]\n'\
           +'       where <DSNAME> is like one of the list:\n         %s\n' % '\n         '.join(DSNAMES[:3])\
           +'       <DETNAME> is optional parameterr like one of the list:\n         %s\n' % '\n         '.join(DETNAMES[:3])\
           +'       <TSTAMP> - timestamp in format YYYYMMDDHHMMSS - beginning of the validity range'\
           +'\n\nTry: jungfrau_gain_constants -h'

#------------------------------

def log_file_name(lfpath, dsname) :
    """Returns log file name
    """
    # Returns str like /reg/g/psdm/logs/calibman/jungfrau_gain/2018/05/20180503-104619-dubrovin-22122.txt
    t0_sec = time()
    tstamp = gu.str_tstamp('%Y%m%dT%H%M%S', t0_sec)
    #year_month = gu.str_tstamp('%Y/%m', time_sec=None)
    sdsname =  dsname.replace('exp=','')
    sdsname = sdsname.replace(':run=','-r')
    year = gu.str_tstamp('%Y', time_sec=None)
    return '%s/%s/%s-%s-%s.txt' % (lfpath, year, tstamp, sdsname, gu.get_login())#, os.getpid())

#------------------------------

def config_logger_v0(log_fname, llev) :
    """logger.basicConfig
    """
    logging.basicConfig(format='%(levelname)s: %(message)s', level=llev)
    #logging.basicConfig(format='%(asctime)s %(name)s %(levelname)s: %(message)s', datefmt='%H:%M:%S', level=logging.DEBUG)
    #logging.basicConfig(format='%(levelname)s: %(message)s',\
    #                    level=llev,\
    #                    handlers=[fhandler, shandler]
    #)

#------------------------------

def config_logger(log_fname, loglev) :
    """Configure logger for stream and file handlers
    """
    llev = logging._levelNames.get(loglev, logging.DEBUG)
    fmt = '%(levelname)s: %(name)s %(message)s' if llev == logging.DEBUG else\
          '%(message)s'
    formatter = logging.Formatter(fmt)

    # Create logfile for any logging level excluding DEBUG
    if llev != logging.DEBUG :
        fhandler = logging.FileHandler(log_fname, 'w')
        fhandler.setFormatter(formatter)
        logger.addHandler(fhandler)

    shandler = logging.StreamHandler()
    shandler.setFormatter(formatter)
    logger.addHandler(shandler)

    logger.setLevel(llev)

#------------------------------

def jungfrau_gain_constants() :
    """Main script for CL
    """
    print(80*'_')

    parser = option_parser()

    if len(sys.argv)==1 :
        parser.print_help()
        print('\n%s' % usage())
        sys.exit('\nWARNING: MISSING ARGUMENTS\n')

    (popts, pargs) = parser.parse_args()
    nargs = len(pargs)
    DSNAME = pargs[0] if nargs>0 else popts.dsname
    DETNAME= pargs[1] if nargs>1 else popts.source
    TSTAMP = pargs[2] if nargs>2 else popts.tstamp
    clbdir = popts.clbdir
    deploy = popts.deploy
    upload = popts.upload
    loglev = popts.loglev
    lfpath = popts.lfpath
    repdir = popts.repdir

    defs = vars(parser.get_default_values())
    DSNAME_DEF  = defs['dsname']
    DETNAME_DEF = defs['source']
    TSTAMP_DEF  = defs['tstamp']

    #llev = logging._levelNames.get(loglev, logging.DEBUG)
    verbose = loglev != 'INFO'
    if verbose : print_command_line_parameters(parser)

    log_fname = log_file_name(lfpath, DSNAME)
    gu.create_path(log_fname, depth=6, mode=0o2777, verb=False)

    #print('==== Start logging ====')
    config_logger(log_fname, loglev)

    logger.info('Generator of gain correction constants for Jungfrau')
    logger.info(gu.log_rec_on_start())
    logger.debug('Log file: %s' % log_fname)

    ds = psana.DataSource(DSNAME)
    env = ds.env()
    source = ju.psana_source(env, DETNAME)
    ssource = ju.string_from_source(source)
    strsrc  = ssource.replace(':','-')
    npanels = ju.number_of_modules_in_jungfrau(env, source)
    logger.info('Dataset "%s", name pattern "%s"' % (DSNAME, DETNAME)\
               +'\n      found source "%s" with number of panels: %s' %(ssource, str(npanels)))
    jfid = ju.id_jungfrau(env, source)

    co = ju.jungfrau_config_object(env, source)
    if co.Version < 3 : # for old versions of config jfid="MecTargetChamber.0-Jungfrau.0"
        msg = "WARNING: Jungfrau id is not available for config V%d. Constants can't be auto-generated." % co.Version
        logger.warning(msg)
        sys.exit()

    cdirs = ju.find_panel_calib_dirs(jfid, dname=ju.DIRNAME, tstamp=TSTAMP)
    if None in cdirs :
        msg = "Calibdirs can't be found for all panels"
        sys.exit(msg)

    dirs = ['%s/%s' % (ju.DIRNAME, d) for d in cdirs]

    msg = 'Selected panel repository directories:'
    for d in dirs : msg += '\n      %s' % d
    logger.info(msg)

    ctype_gain   = 'pixel_gain'
    ctype_offset = 'pixel_offset'

    exp      = env.experiment()
    runnum   = env.configStore().get(psana.EventId).run()
    calibdir = env.calibDir() if clbdir is None else clbdir
    #ctypedir = '/some-path/calib/Jungfrau::CalibV1/CxiEndstation.0:Jungfrau.0/'
    ctypedir = '%s/Jungfrau::CalibV1/%s' % (calibdir, ssource)
    ofname   = '%d-end.data' % runnum
    lfname   = None
    verbos   = False

    #fprefix = '%s-r%04d_%s_%s'%(exp, runnum, ssource, jfid)
    fprefix = '%s-r%04d_%s'%(exp, runnum, ssource)
    #logger.info('fprefix %s' % fprefix)
    #print('\nXXXXXXXX fprefix %s' % fprefix)

    fprefix_g = '%s_%s'%(fprefix, ctype_gain)
    fprefix_o = '%s_%s'%(fprefix, ctype_offset)

    #----------
    if True :
        logger.info('Begin merging panel arrays')
        ju.merge_panel_constants(dirs, ifname='%s/g%d_gain.npy',   ofname=fprefix_g, ofmt='%.4f')
        ju.merge_panel_constants(dirs, ifname='%s/g%d_offset.npy', ofname=fprefix_o, ofmt='%.1f')
    #else : logger.warning('Add option -M to merge panel arrays')

    #----------

    logger.debug('calibdir: %s'%calibdir)
    logger.debug('destination file name: %s'%ofname)

    #----------
    if deploy :
        logger.info('Deploy calib files under %s' % ctypedir)
        gu.deploy_file('%s.txt'%fprefix_g, ctypedir, ctype_gain,   ofname, lfname, verbose)
        gu.deploy_file('%s.txt'%fprefix_o, ctypedir, ctype_offset, ofname, lfname, verbose)
    else :
        logger.warning('Add option -D to deploy calib files under directory %s' % ctypedir)

    #----------
    if upload :
        #dcs add <fname>.h5 -t pixel_gain -f <ifname>.txt -T 0 -m "comment"
        msg = 'Commands to upload calibration constants in repository %s:' % repdir
        #cmt = 'Id found in %s for %s' % (DSNAME, ssource)
        cmt = 'See command: jungfrau_gain_constants -d %s -U' % (DSNAME)
        fmt = 'dcs add %s/jungfrau-%s.h5 -t %s -f %s.txt -T 1500000000 -m "%s" -e %s -r %s -d %s'
        msg += '\n==== upload command for %s:\n' % ctype_gain
        msg += fmt % (repdir, jfid, ctype_gain,   fprefix_g, cmt, exp, runnum, ssource)
        msg += '\n==== upload command for %s:\n' % ctype_offset
        msg += fmt % (repdir, jfid, ctype_offset, fprefix_o, cmt, exp, runnum, ssource)
        logger.info(msg)
    else :
        logger.warning('Add option -R to learn about uploading constants in repository %s' % repdir)

    logger.info('Log file: %s' % log_fname)
    #fhandler.close()

#------------------------------

def option_parser() :
    from optparse import OptionParser

    d_dsname = 'exp=mecls3216:run=226' # 'exp=xpptut15:run=430'
    d_source = 'Jungfrau'
    d_tstamp = '20150101000000' # gu.str_tstamp(fmt='%Y%m%d%H%M%S', time_sec=None)
    d_deploy = False
    d_upload = False
    d_clbdir = None
    d_loglev = 'INFO'
    d_lfpath = '/reg/g/psdm/logs/calibman/jungfrau_gain' # '/#YYYY-MM/fname.txt'
    d_repdir = '/reg/g/psdm/detector/calib/jungfrau'

    h_dsname='dataset name, default = %s' % d_dsname
    h_source='input ndarray source name, default = %s' % d_source
    h_tstamp='time stamp for beginning of the validity range in format YYYYMMDDHHMMSS, default (now) = %s' % d_tstamp
    h_deploy='deploy files in experiment calib directory, default = %s' % d_deploy
    h_upload='add files to reposi uploadtory calibration hdf5 file for this jungfrau detector, default = %s' % d_upload
    h_clbdir='non-default calib directory for deployment of calibration files, default = %s' % d_clbdir
    h_loglev='dataset name, default = %s' % d_loglev
    h_lfpath='path to log file, default = %s' % d_lfpath
    h_repdir='repository of hdf5 files, default = %s' % d_repdir

    parser = OptionParser(description='Generator of gain correction constants for Jungfrau', usage = usage())
    parser.add_option('-d', '--dsname', dest='dsname', default=d_dsname, action='store', type='string', help=h_dsname)
    parser.add_option('-s', '--source', dest='source', default=d_source, action='store', type='string', help=h_source)
    parser.add_option('-t', '--tstamp', dest='tstamp', default=d_tstamp, action='store', type='string', help=h_tstamp)
    parser.add_option('-D', '--deploy', dest='deploy', default=d_deploy, action='store_true',           help=h_deploy)
    parser.add_option('-U', '--upload', dest='upload', default=d_upload, action='store_true',           help=h_upload)
    parser.add_option('-C', '--clbdir', dest='clbdir', default=d_clbdir, action='store', type='string', help=h_clbdir)
    parser.add_option('-L', '--loglev', dest='loglev', default=d_loglev, action='store', type='string', help=h_loglev)
    parser.add_option('-P', '--lfpath', dest='lfpath', default=d_lfpath, action='store', type='string', help=h_lfpath)
    parser.add_option('-R', '--repdir', dest='repdir', default=d_repdir, action='store', type='string', help=h_repdir)

    return parser

#------------------------------
#------------------------------
#------------------------------

if __name__ == "__main__" :
    jungfrau_gain_constants()
    sys.exit(0)

#------------------------------
